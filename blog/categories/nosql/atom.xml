<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nosql | Записки Вредного программиста]]></title>
  <link href="http://zudochkin.ru/blog/categories/nosql/atom.xml" rel="self"/>
  <link href="http://zudochkin.ru/"/>
  <updated>2014-02-23T20:16:54+04:00</updated>
  <id>http://zudochkin.ru/</id>
  <author>
    <name><![CDATA[Зудочкин Дима]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MongoDb и PHP]]></title>
    <link href="http://zudochkin.ru/2011/08/mongodb-php"/>
    <updated>2011-08-20T01:46:43+04:00</updated>
    <id>http://zudochkin.ru/2011/08/mongodb-php</id>
    <content type="html"><![CDATA[<p>В данной заметке вы узнаете что такое NoSQL (MongoDB), научитесь устанавливать MongoDB сервер и взаимодействовать с ним на PHP.</p>

<!-- more -->


<h3>NoSQL &ndash; что за странная аббревиатура?</h3>

<p>Наверное, какждый из вас уже слышал эту аббревиатуру, может даже вы &ldquo;щупали&rdquo; ее на зубок, а может и используете ее в своих проектах на продакшн серверах. Данная технология в момент ее появления наделала много шуму, легко втиснувшись и отобрав кусок хлеба у реляционных баз данных. NoSQL термин означает что это не только (not only) SQL, хотя на первый взгляд кажется, что это не SQL (no). Термин означает множество технологий работы с базами данных в обход стандартной реляционной модели. Данные могут храниться в виде пар ключ-значение, деревьев или документов. Мы с вами рассмотрим последнее.</p>

<h3>Описание документо-ориентированных хранилищ</h3>

<p>В данной системе управления базами данных единицей хранения информации является некий документ, хранящийся в виде пар ключ-значние и имеющих некие связи.</p>

<h3>Что же такое MongoDB?</h3>

<p><img class="image" src="/images/posts/2011-08-mongodb-php/mongodb-300x241.png">До рассмотрения возможностей данного замечательного продукта хотелось бы отметить 6 основных концепций, заключенных в нем:</p>

<ol>
<li>Концепция базы данных не отличима от понятий базы данных в реляционных СУБД. MongoDB также может содержать ноль или более баз данных, которые являются контейнером верхнего уровня.</li>
<li>База данных может содрежать ноль или более коллекций. Коллекциями в контексте СУРБД (здесь и далее система управления реляционными базами данных) являются таблицы.</li>
<li>Коллекция может содрежать в себе документы. В СУРБД это строки.</li>
<li>Документ может состоять из разного количества полей. Если проводить аналогию с реляционной моделью, то это конечно же столбец.</li>
<li>Индексы есть и в MongoDB, и в СУРБД, функции их почти неотлимы.</li>
<li>Курсоры есть в MongoDB, но прямого аналога в реляционной модели нет. Важно понять, что, когда вы запрашиваете MongoDB вернуть вам определенные данные, Mongo возвращает курсор, с помощью которого мы можем подсчитать или пропустить некоторые документы, без нагрузки на сервер.</li>
</ol>


<h3>Установка MongoDB</h3>

<p>Подробная информация об установке широко представлена на официальном сайте, поэтому не будем заострять внимание на этом разделе. Я затрону лишь основные моменты, чтобы начать работу.
Пройдемся по шагам, чтобы ее завершить:</p>

<ol>
<li>Заходим на <a href="http://www.mongodb.org/downloads">официальную страницу загрузки</a>, скачиваем подходящую скомпилированную версию.</li>
<li>Распаковываем архив куда угодно и заходим в папку bin. mongod &ndash; сервер, mongo &ndash; клиентская оболочка &ndash; с этими двумя исходниками мы и будем проводить большую часть времени.</li>
<li>Создаем текстовый файл в папке bin, пусть называться он будет mongod.conf</li>
<li>Записываем одну строку во вновь созданный файл dbpath=ПУТЬ-ГДЕ-ВЫ-ХОТИТЕ-ЧТОБЫ-ЛЕЖАЛА-БАЗА-ДАННЫХ. К примеру, на Windows вы можете написать dbpath=c:\mongodb\data, под Линуксом dbpath=/etc/mongodb/data. Указанный путь должен сущестовать (позаботьтесь об этом).</li>
<li>Запустите из папки bin файл mongod с параметром **&mdash;config /путь/к/конфигу/mongodb.conf.</li>
</ol>


<p>Установка завершена. Чтобы это проверить запустите в командной строке клиент (mongo), которые должен автоматически соединиться с запущенным сервером и отобразить приглашение. Попробуйте ввести <strong>help</strong> или db.version(). Пока оставим наш клиент и перейдем к PHP.</p>

<h3>PHP и MongoDB</h3>

<p>MongoDB на данный момент имеет поддержку почти всех популярных языков программирования, таких как C++, Erlang, Java, Javascript, Perl, Python и PHP. На последнем мы и остановимся.</p>

<h5>Описание расширения</h5>

<p>Я не буду приводить пример установки раширений для PHP. В нем нет ничего нетривиального. Лучше заострю внимание на чем-нибуь более интересным, чтобы вы после прочтения данной заметки легко написать свое первое приложение с использованием MongoDB. Полное описание расширения вы можете на странице официального руководства (http://www.php.net/manual/en/book.mongo.php).</p>

<h5>Соединение</h5>

<p>Начнем с соединения (сервер на данный момент должен быть запущен). Если мы экспериментируем на своей локальной машине, то все просто.</p>

<p>``` php
&lt;?php</p>

<pre><code>    $mongo = new Mongo(); // соединяемся с сервером
    $db = $mongo-&gt;database; // выбираем базу данных
</code></pre>

<p>```</p>

<p>Если же вы используете MongoDB на выделенном хостинге или по каким-то другим причинам вам требуется авторизация, то данный пример немного усложнится.</p>

<p>``` php
 array(</p>

<pre><code>    'host' =&gt; 'mongodb.example.com',
    'port' =&gt; '27017',
    'username' =&gt; 'mongodb-user',
    'password' =&gt; 'SECRET-PASSWORD',
    'dbname' =&gt; 'DATABASE-NAME'
)
</code></pre>

<p>);</p>

<p>$collectionName = &lsquo;COLLECTION-NAME&rsquo;;</p>

<p>$mongo = new Mongo(</p>

<pre><code>"mongodb://{$options['db']['username']}:{$options['db']['password']}@{$options['db']['host']}:{$options['db']['port']}/{$options['db']['dbname']}"
</code></pre>

<p>);</p>

<p>$collection = $mongo->$options[&lsquo;db&rsquo;][&lsquo;dbname&rsquo;]&ndash;>$collectionName;
```</p>

<p>Данные пляски очень похожи на DSN, которые повсеместно используется с PDO.</p>

<h5>Запись</h5>

<p>Соединяться с сервером мы уже научились, также как и выбирать коллекцию. Кстати, если нет коллекции, ничего страшного, если вы будете вносить данные в несуществующую коллекцию, то заботливый Mongo ее для вас создаст. Еще раз убеждаюь, что MongoDB создана для лентяев, которые хотят сосредоточиться только на важных вещах, а на не плясках с бубном. :)</p>

<p>``` php</p>

<pre><code>$collection-&gt;insert(
    array(
        'title' =&gt; 'Simple Title',
        'alias' =&gt; 'about',
        'content' =&gt; 'Lorem Ipsum',
        'images' =&gt; array('image1.jpg', 'image2.jpg')), // вставляем какие угодно данные, хоть массивы
    array("safe" =&gt; 1)); // данный параметро сообщает MongoDB проследить за успешностью вставки, обычно этот параметр отключен
</code></pre>

<p>```</p>

<h5>Выборка</h5>

<p><code>php
$content = $collection-&gt;findOne(array('alias' =&gt; 'about')); // находим одну запись, удоволетворяющая условию {alias: 'about'}
var_dump($content);
</code></p>

<p>Выборка происходит почти также как в реляционных базах данных после слова WHERE (select * from COLLECTION-NAME WHERE alias = &lsquo;about&rsquo; LIMIT 1).  Разработчики предусмотрели множество плюшек при выборке, но всех их рассмотреть в данной вводной заметке не представляется возможным, поэтому расскажу еще о выборке с участием регулярных выражений и отклоняюсь.</p>

<p>``` php
$cursor = $collection->find(array(&lsquo;word&rsquo; => new MongoRegex(&ldquo;/{$mask}/ig&rdquo;)))&ndash;>limit(50);</p>

<p>$words = array();</p>

<p>foreach ($cursor as $o)</p>

<pre><code>$words[] = $o;
</code></pre>

<p>```</p>

<p>Данный пример почти из реального проекта, который показывает и выборку по регулярному выражению и работу с курсорами. Надеюсь, данный код не вызвал у вас затруднений.</p>

<h5>Изменение</h5>

<p>Изменение данных в документах чуть более обширный раздел, заключающий в себе и выборку и запись новых данных. Но не все так сложно, как я малюю. Начну с примера.</p>

<p><code>php
$collection-&gt;update(array('alias' =&gt; 'about'), array('$set' =&gt; array("title" =&gt; 'In MongoDB we trust')));
</code></p>

<p>Данная запутанная с первого взляда запись на самом деле проста, если разбить ее на составляющие. Первый параметр в методе update() отвечая за выборку, т.е. критерии выборки, второй параметр, как будем менять. В данном случае мы установим ($set) заголовок в новый. Отличные от $set параметры вы можете найти в документации к MongoDB. Аналог в виде SQL мог бы выглядеть так</p>

<p><code>sql
update COLLECTION-NAME set title = 'In MongoDB we trust' where alias = 'about'
</code></p>

<p>Данного минимума, как я уже упоминал ранее, должно хватить для реализации несложного приложения. Все информацию помимо упомянутого мною в данной заметке, можно получить на официальном сайте MongoDB</p>

<h3>Заключение</h3>

<p>В первую очередь вам следует понять, что волшебной таблетки не существует. Любое решение, каким бы оно не казалось со стороны гибким и легким, имеет свои плюсы и минусы. Если вам не нужно хранить статистические данные, которые размазаны по десятками а то и сотням таблиц со сложными связями, вряд ли вам подойдет NoSQL решения. Если же данные легко подвергаются денормализации, то смело выбирайте NoSQL из-за скорости и удобности работы.</p>
]]></content>
  </entry>
  
</feed>
