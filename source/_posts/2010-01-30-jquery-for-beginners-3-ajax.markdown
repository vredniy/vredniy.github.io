---
author: admin
comments: true
date: 2010-01-30 19:12:03+00:00
layout: post
slug: jquery-for-beginners-3-ajax
title: jQuery для начинающих часть 3 (AJAX)
wordpress_id: 183
categories:
- jQuery
tags:
- AJAX
- jQuery
---

Приветствую вас, люди, идущие в ногу в техническим прогрессом, использующие на своих веб-проектах AJAX или только собирающиеся это делать.

![jquery ajax](/images/ajax/1.jpg)

Этот акроним (А именно Asynchronous Javascript and XML) появился в 2005 году, хотя сама технология существовала уже несколько лет, с момента, когда корпорация Microsoft в 1998 году реализовала возможность выполнять асинхронные запрсы в обзод iframe'ов. Асинхронный значит, что запросы к серверу происходят в фоновом режиме, что не мешает нам дальше взаимодействовать со страницей. Что довольно приятно отражается на юзабилити сайта - ведь не хочется, чтобы страница обновлялась после каждого комментария или ответа на голосование. И конечно же во всем есть и плохая, и хорошая сторона. Не очень хорошей стороной являться будет недоступность асинхронно подгружаемого контента для поисковых систем, но мы этим злоупотреблять не будем.

Не используя на своих сайтах jQuery, нам бы пришлось намного дольше проектировать код на JavaScript. Во-первых, нам бы пришлось создать XHR - объект (XMLHttpRequest), учитывая особенности всех современных веб-браузеров, по большей части конечно же всех любимыми нами продуктов Microsoft'а.  Одно создание этого объекта займет несколько строк. Посмотрите на пример.

`
var xhr_obj;
if (window.XMLHttpRequest) {
   xhr_obj = new XMLHttpRequest();
}
else if (window.ActiveXObject) {
   xhr_obj = new ActiveXObject("Msxml2.XMLHTTP");
}
else {
   throw new Error("AJAX не поддерживается");
}
`

Мы не будем рассматривать AJAX на низком уровне, ограничимся лишь AJAX'ом на jQuery. Что вы заметите немногим позже в разы легче и нагляднее. Начнем как всегда с описание команд, а дальше разберем все подробнее на примерах.

Первой командой в наборе будет load, которая подгружает с сервера данные и замещает обернутый набор.
Синтаксис ее таков load(url, parameters, callback)
где url - адрес, которому направляется запрос
parameters - параметры, которые передаются, если заданы, методом POST по url-адресу
callback - функция, которая будет вызвана после завершения AJAX-запроса, в которую передаются текст ответа, статус и рассмотренный нами чуть выше объект XMLHttpRequest.
Небольшой пример на эту команду.
`
$('p:first').load('/testajax.php',{}, function() {
   alert('данные загружены');
});
`
Данные пример отправляет асинхронный запрос серверу, ответом от него заменяет текст первого абзаца на нашей странице, по завершении мы получаем сообщение о том, что данные загружены. В этом примере мы не передаем никаких параметров скрипту, этим мы займемся немного позже. Хотя этот скрипт уже можно использовать для показа произвольной новости.
Еще одно применение данной команды можно найти при показе информации о стране, которую мы будем выбирать из выпадающего списка и отображать полезную информацию.

`
$(function() {
   $('#country').change(function() {
      var Country = $(this).val();
      $('div').load('country.php?country=' + country);
   })
   .change();
});
`
После выбора из списка страны мы отправляем нашему скрипту country.php выбранную страну и получаем от него описание, которое мы выводим в div.
Этот country.php может выглядеть примерно так.
`

`
Работающий пример вы можете посмотреть [тут](/examples/jquery/3/index.html).
Продолжение очень скоро проследует...
