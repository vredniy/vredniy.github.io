<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Записки Вредного программиста]]></title>
  <link href="http://zudochkin.ru/atom.xml" rel="self"/>
  <link href="http://zudochkin.ru/"/>
  <updated>2014-02-23T20:16:54+04:00</updated>
  <id>http://zudochkin.ru/</id>
  <author>
    <name><![CDATA[Зудочкин Дима]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Полнотекстовый поиск по телефонным номерам разного формата (PostgreSQL)]]></title>
    <link href="http://zudochkin.ru/2014/01/fulltext-phones-postgresql"/>
    <updated>2014-01-22T02:44:24+04:00</updated>
    <id>http://zudochkin.ru/2014/01/fulltext-phones-postgresql</id>
    <content type="html"><![CDATA[<p>В одном из последних своих проектов, где использовалась большая база контактов, у каждого контакта имелось несколько телефонов, понадобилось искать по номеру телефона. Недолго думая решил сделать это через встроенный ILIKE, но поиск почти ничего не находил, потому что в таблице с номерами телефонов хранились номера в совершенном разных форматов, например, +7(903)555-12-11, +46 8 52506000 и т.д. Поэтому нужно было придумать что-то более радикальное и в то же время не очень медленное. <!--more--></p>

<p>Идея номер 2 заключалась в том, чтобы для каждого телефонного номера в этой же таблице сохранять номер телефона без специфических символов, т.е. 79035551211 и 46852506000 соответственно. Но идея не нравилась тем, что необходимо было почти дублировать колонку, оставил этот план про запас, на случай, если ничего более путного не придумаю.</p>

<p>Идея номер 3 заключается в использовании встроенных функций замены при поиске, например <strong>regexp_replace</strong>, которая позволяет заменять строки по регекспу.</p>

<p><code>SELECT number FROM phones WHERE regexp_replace(number, '\\d', '', 'g') ILIKE '%313%';</code> &ndash; найдет все номера, в которых встречаются подряд идущие цифры <strong>313</strong> (первый параметр это где ищем, второй &ndash; сам регексп <code>\d</code> &ndash; только цифры, третий &ndash; меняем на пустую строку и последний модификатор для регулярного выражения, который указывает что поиск нужно вести до победного, а не останавливается на первом вхождении).  Но опять же есть небольшая проблема, если посмотреть <strong>EXPLAIN</strong>, то становится понятно в чем она.</p>

<p>Для этого запускаем <code>EXPLAIN ANALYZE SELECT number FROM phones WHERE regexp_replace(number, '\\d', '', 'g') ILIKE '%313%';</code> в результате видим примерно следующее.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2014-01-fulltext-phones-postgresql/huge_Screenshot_2014-01-21_20.31.34.png"></p>

<p>Что как бы намекает нам, что это очень долго, потому что поиск идет строка за строкой, просматривая каждую строку таблицы. Значит, нам нужен индекс, комплексный индекс.</p>

<p><code>CREATE INDEX idx_phones_search_on_number ON phones USING gist(regexp_replace(number, '\\d', '', 'g') gist_trgm_ops);</code></p>

<p>Проверяем, запускаем такой же запрос и получаем следующую картину.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2014-01-fulltext-phones-postgresql/huge_Screenshot_2014-01-21_21.48.18.png"></p>

<p>Мы видим, что сейчас начал использоваться индекс и скорость выполнения запроса возросла в 6 с небольшим раз. Магия индексов воочию.</p>

<p>Но давайте пойдем чуть дальше и допустим, что пользователь сам вводит номер телефона, по которому собирается найти контакт. Он может это сделать как нам удобно <em>79035551211</em> или же как нам вообще не удобно, <em>+7(903)555-12-11</em> и более того, он ничего не найдет. Значит нужно и в запросе от пользователя удалять все нецифровые символы. Например, так:</p>

<p><code>'+7(903)555-12-11'.gsub(/\D/, '')</code>, но это добавляет некоторую головную боль, т.к. и в ruby, и в sql придется выполнять одно и то же действие, но на разных языках, что не есть хорошо.</p>

<p>Помогут решить нам эту проблему postgresql функции. Одна будет удалять все нецифровые символы, другая будет оставлять только цифры и знак <strong>%</strong>, для задания маски поиска. Для этого создадим миграцию для добавления двух функций и заодно добавим индекс. Получится следующее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddFunctionsAndIndexForSearchByPhone</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span> <span class="sx">%q{</span>
</span><span class='line'><span class="sx">      CREATE OR REPLACE FUNCTION onlynum(n text) RETURNS text AS</span>
</span><span class='line'><span class="sx">      $func$</span>
</span><span class='line'><span class="sx">      SELECT regexp_replace($1, &#39;\\D&#39;, &#39;&#39;, &#39;g&#39;);</span>
</span><span class='line'><span class="sx">      $func$ LANGUAGE sql IMMUTABLE;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">      CREATE OR REPLACE FUNCTION onlynums(n text) RETURNS text AS</span>
</span><span class='line'><span class="sx">      $func$</span>
</span><span class='line'><span class="sx">      SELECT regexp_replace($1, &#39;[^\d%]&#39;, &#39;&#39;, &#39;g&#39;);</span>
</span><span class='line'><span class="sx">      $func$ LANGUAGE sql IMMUTABLE;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">      CREATE INDEX idx_phones_search_on_number ON phones USING gist(onlynum(number) gist_trgm_ops);</span>
</span><span class='line'><span class="sx">    }</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">      DROP INDEX idx_phones_search_on_number;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">      DROP FUNCTION onlynum(text);</span>
</span><span class='line'><span class="sx">      DROP FUNCTION onlynums(text);</span>
</span><span class='line'><span class="sx">    }</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Запустим миграцию <code>rake db:migrate</code> и добавим где-нибудь в модель, пусть это будет <strong>Phone</strong> метод <strong>.search</strong> примерно следующего содержания:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Phone</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search</span> <span class="n">term</span>
</span><span class='line'>    <span class="n">where</span> <span class="s1">&#39;onlynum(phones.number) LIKE onlynums(:search)&#39;</span><span class="p">,</span> <span class="ss">search</span><span class="p">:</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">term</span><span class="si">}</span><span class="s2">%&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Это очень упрощенный метод, но он работает, теперь для поиска телефона, необходимо вызвать где-нибудь в коде наш метод: <code>Phone.search '313'</code> и вы получите список строк, телефоны которых содержат заданную строку.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2014-01-fulltext-phones-postgresql/huge_Screenshot_2014-01-21_22.39.20.png"></p>

<p>Надеюсь, данный пост поможет вам. Все мысли, ошибки, неточности можете оставлять в комментариях, с удовольствием их почитаю :) Мир, братья и сестры.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby OpenURI::open и ProgressBar]]></title>
    <link href="http://zudochkin.ru/2013/11/open-uri-progress-bar"/>
    <updated>2013-11-25T18:43:24+04:00</updated>
    <id>http://zudochkin.ru/2013/11/open-uri-progress-bar</id>
    <content type="html"><![CDATA[<p>Рыская по документации к методу open из набора OpenURI (мне нужно было установить большее значение timeout&#8217;а). Пролистав нужное место в документации натолкнулся на интересные параметры, с которыми можно вызывать метод open.<!--more--></p>

<ul>
<li><code>:content_length_proc =&gt; lambda {|content_length| ... }</code> &ndash; если данный proc установлен, то в него передается Content-Length или nil, если данный параметр недоступен. В этот момент мы уже знаем полный размер файлы и можем нарисовать красивый ProgressBar.</li>
<li><code>:progress_proc =&gt; lambda {|size| ...}</code> &ndash; данный proc вызывается с одним параметром (размер скаченного фрагмента в байтах), когда метод <strong>open</strong> получает очередной фрагмент из сети.</li>
<li><code>:read_timeout=&gt;10</code> &ndash; это тот параметр, из-за которого я и полез в документацию, устанавливает таймаут на чтение для http соединения.</li>
</ul>


<p>А теперь небольшой пример использования данных знаний. Нам понадобится большой файл, я взял трехмегабайтный файл и положил его в Dropbox/Public, чтобы легко было получить на него ссылку. Также понадобится установленный gem <a href="https://github.com/jfelchner/ruby-progressbar">ruby-progressbar</a>.</p>

<p>Вот и все, работающий пример готов.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ruby-progressbar&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">progress_bar</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;https://dl.dropboxusercontent.com/u/11041525/DIX1.0Universal.dmg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content_length_proc</span><span class="p">:</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">total</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">total</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">progress_bar</span> <span class="o">=</span> <span class="no">ProgressBar</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Downloaded&#39;</span><span class="p">,</span> <span class="ss">total</span><span class="p">:</span> <span class="n">total</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="n">progress_proc</span><span class="p">:</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">step</span><span class="o">|</span>
</span><span class='line'>  <span class="n">progress_bar</span><span class="o">.</span><span class="n">progress</span> <span class="o">=</span> <span class="n">step</span>
</span><span class='line'><span class="p">})</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;File </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2"> successfully downloaded&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<iframe width="560" height="315" src="http://zudochkin.ru//www.youtube.com/embed/SIWBIl1oRrc" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Первая выездная фотосъемка (Большой Москворецкий мост)]]></title>
    <link href="http://zudochkin.ru/2013/08/first-photography"/>
    <updated>2013-08-21T16:41:24+04:00</updated>
    <id>http://zudochkin.ru/2013/08/first-photography</id>
    <content type="html"><![CDATA[<p>Две недели мы планировали встретиться с <a href="http://sapegin.ru/">Артемом Сапегиным</a>, но на прошлой недели я подвел из-за свой болезни. На этой неделе же судьба была благосклонна ко мне и со здоровьем все было хорошо.<!--more--></p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-first-photography/huge_IMG_2180.jpg"></p>

<p>Договорились встретиться в 19 часов, чтобы пофотографировать пейзаж во время заката. Т.к. я в этом деле еще новичок, то был согласен на любый действа, тем более, что Артем занимается фотографией уже 9 с лишним лет. А мне очень хочется постичь съемочное мастерство.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-first-photography/huge_IMG_2151.jpg"></p>

<p>Как раз к этой встрече купил себе простой и дешевый штатив для экспериментов и очень нетерпелось его опробовать.</p>

<p>Встретились и пошли на <a href="http://ru.wikipedia.org/wiki/%D0%91%D0%BE%D0%BB%D1%8C%D1%88%D0%BE%D0%B9_%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%BE%D1%80%D0%B5%D1%86%D0%BA%D0%B8%D0%B9_%D0%BC%D0%BE%D1%81%D1%82">Большой Москворецкий мост</a>, установили штативы, примостили туда свои камеры и начали съемку еще в досумеречное время. Я задавал Артему, наверное, тысячу вопросов, на которые всегда находился ответ. То у меня снимки получались засвеченными, то наоборот слишком темными. Артем помог выставить правильные параметры: выдержку и диафрагму, после чего снимки стали получаться намного приятнее, по крайней мере, как по мне.</p>

<p>Дальше были сумерки и закат, мои эксперименты с режимами и выдержкой. Потом сходили, дожидаясь включения искусственного освещения, попить кофе в СтарБакс. Вернулись на мост, и я стал снимать движущиеся машины с большой (10-30 секунд) выдержкой. Получившиеся фотографии приводили меня в неописуемый восторг.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-first-photography/huge_IMG_2198.jpg"></p>

<p>Это моя первая &ldquo;выездная фотосъемка&rdquo; за что хочу сказать Артему огромное спасибо. Очень надеюсь, что желание снимать не только не пропадет, а станет еще сильнее.</p>

<p>Так что, друзья, пробуйте, эксперементируйте и будет вам счастье :)</p>

<p>Ссылка на <a href="http://www.flickr.com/photos/vredniy/sets/72157635129351284/">фотографии на Flickr</a>, которые, по-моему, вышли неплохо.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-first-photography/huge_IMG_2124.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Написание первого плагина для Vim]]></title>
    <link href="http://zudochkin.ru/2013/08/vim-first-plugin"/>
    <updated>2013-08-16T03:40:24+04:00</updated>
    <id>http://zudochkin.ru/2013/08/vim-first-plugin</id>
    <content type="html"><![CDATA[<p>Я использую Vim уже больше года и только сейчас возникла необходимость написать свое первое для него расширение. Расширение будет преобразовывать старые хеши из версии 1.8 языка Ruby в новые, появившиеся в версии 1.9, т.е. нечто вида <strong>:a => &lsquo;b&rsquo;</strong> превратится в нечто более читаемое и компактное <strong>a: &lsquo;b&rsquo;</strong>.<!--more--></p>

<p>Для начала необходимо создать папку, где будем хранить наше расширение, я использую <strong>~/Projects/viml/ruby-hashes</strong>, для того, чтобы проекты на одном языке не лежали в одной папке с проектами на другом. (Когда проектов очень много можно легко запутаться).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tree .
</span><span class='line'>├── LICENSE-MIT.txt
</span><span class='line'>├── README.md
</span><span class='line'>├── autoload
</span><span class='line'>│   └── rubyhashes.vim
</span><span class='line'>└── doc
</span><span class='line'>
</span><span class='line'>2 directories, 3 files</span></code></pre></td></tr></table></div></figure>


<p>Вот что будет представлять из себя весь плагин. <strong>LICENSE-MIT.txt</strong>, думаю не вызывает вопросов, впрочем, как и <strong>README.md</strong>, остается только один файл с раширением <strong>.vim</strong>, в папке <strong>autoload</strong>, почему именно в эту папку, в не в папку <strong>plugin</strong>, наверное, спросите вы. Отвечу, что в папке <strong>autoload</strong> хранятся вещи, которые загружаются только по требованию, т.е., если нам не нужно будет это расширение, <strong>Vim</strong> загружать его не будет. (Надеюсь, ничего не перепутал).</p>

<h3>Задача</h3>

<p>Реализовать плагин, который сможет заменять старые хеши на новые во всем файле.</p>

<h3>Реализация</h3>

<p>Теперь приступим непосредственно к программирование на <strong>VimScript</strong>&lsquo;e. <strong>VimScript</strong> &ndash; достаточно богатый скриптовый язык ко всему прочему позволяющий также и объявлять функции, а куда же без них. Функции будем называть следующим образом <strong>#{названиеФайлаБезРасширения}#НазваниеФункции()</strong>, т.е. функцию в файле <code>autoload/rubyhashes.vim</code>, производящую замену по всему файлу, мы назовем <code>rubyhashes#ReplaceAll()</code>. И соответственно ее объявление будет выглядеть, как</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func! rubyhashes#ReplaceAll()
</span><span class='line'>  echo 'hello, world!'
</span><span class='line'>endfunc</span></code></pre></td></tr></table></div></figure>


<p>Для того, чтобы увидеть выполнение нашей функции, файл необходимо сохранить. Чтобы <strong>Vim</strong> интерпретировал нашу функцию, как часть своей экосистемы, необходимо написать <code>:source %</code>. (Примерно тоже самое есть и в <strong>bash</strong>).</p>

<p>Теперь давайте запустим нашу функцию, чтобы увидеть заветные хеллоу ворлд.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-15_23.37.56.png"></p>

<p>Если все было набрано верно, то вы увидите заветную фразу.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-15_23.38.09.png"></p>

<p>Следующим шагом будет составление регулярного выражения, по которому будут находиться старые хеши и заменяться на новые. Если бы мы его писали на Ruby, как и на многих других языках программирования, использующих PCRE &ndash; Perl-совместимые регулярные выражения, к коим относятся javascript, php и др., то оно бы выглядело следующим образом.</p>

<p><code>/:(\w+)\s*=&gt;\s*/</code>, если кто не очень хорошо с ними знаком, скажу что мы сначала ищем <strong>:</strong>, затем любой символ слова <strong>(\w+)</strong>, дальше долго следовать любое количество пробелов <strong>\s</strong>* (ноль в том числе), дальше &ndash; символы <strong>=></strong> и любое количество пробелов.</p>

<p>Осталось только трансформировать данное регулярное выражение в vim-совместимое, для этого необходимо будет экранировать скобки и знак &ldquo;плюс&rdquo;, что в результате превращается в <code>:\(\w\+\)\s*=&gt;\s</code>.</p>

<p>Вы можете написать старый рубишный хеш вида <strong>:a => &lsquo;b&rsquo;</strong>, нажать <strong>/</strong> (запускает поиск) и ввести там <code>:\(\w\+\)\s*=&gt;\s</code> и увидите, что найденный текст подсветился.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-16_00.01.38.png"></p>

<p>Искать по регулярному выражения мы уже научились, теперь необходимо заменять текст по регулярному выражению. В <strong>Vim&#8217;е</strong> для того, чтобы менять текст существует команда <strong>substitute</strong> или сокращенно <strong>s</strong>. Чтобы заменить все вхождения символа &ldquo;а&rdquo;, на &ldquo;б&rdquo;, необходимо выполнить команду <code>:%s/a/b/g</code>, где <strong>%</strong> &ndash; это диапазон поиска и замены, в данном случае это шорткат для всего файла, &ldquo;a&rdquo; &ndash; что заменяем, &ldquo;b&rdquo; &ndash; чем заменяем, &ldquo;g&rdquo; &ndash; это флаг, указывающий, что необходимо не останавливаться на первой замене, а продолжить до конца.</p>

<p>Результирующее команда замены примет вид</p>

<p><code>%s/:\(\w\+\)\s*=&gt;\s*/\1: /ge</code></p>

<p>где <strong>\1:</strong> &ndash; это на что меняем (наша <strong>(\w+)</strong> часть)
<strong>/ge</strong> &ndash; g &ndash; глобальный поиск и замена, e &ndash; это не показывать ошибку, если искомое выражение не найдено.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-16_00.08.56.png"></p>

<p>Дело за малым, сейчас нужно сделать так, чтобы при вызове нашей функции запускалась команда из предыдущего пункта. И тут в <strong>Vim</strong> есть команда, которая так и называется <strong>execute</strong> или сокращенно <strong>exe</strong>. Удалим <strong>echo &lsquo;hello, world!&rsquo;</strong> и допишем</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func! rubyhashes#ReplaceAll()
</span><span class='line'>  exe '%s/:\(\w\+\)\s*=&gt;\s*/\1: /ge'
</span><span class='line'>endfunc</span></code></pre></td></tr></table></div></figure>


<p>Сохраним и запустим <code>:source %</code>, чтобы данные нашей функции обновились. Теперь пробуем. Пишем в командной строке <code>call rubyhashes#ReplaceAll()</code> после того, как нажмем <strong>:</strong>. Если вы запустили нашу функцию в окне, где находились старые хеши, то они должны были поменяться на новые.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-16_00.16.03.png"></p>

<p>Вот и все для небольшого туториала по Vim плагинам, надеюсь, вам понравилось. <a href="https://github.com/vredniy/vim-rubyhashes">Ссылка на репозиторий на гитхабе</a>, где имеется, помимо функции, заменяющей хеши во всем файле, функция, которая производит замену в выделенном.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ротация логов на примере логов Unicorn]]></title>
    <link href="http://zudochkin.ru/2013/08/logrotate-unicorn"/>
    <updated>2013-08-09T03:32:24+04:00</updated>
    <id>http://zudochkin.ru/2013/08/logrotate-unicorn</id>
    <content type="html"><![CDATA[<p>Что-то все реже и реже находится время, чтобы написать несколько абзацев в свой новый блог. Но сегодня будет исключение. Я все же возьму себя в руки и что-нибудь напишу. Речь в сегодняшнем посте пойдет о ротации логов: с чем едят, как готовить на примере нами любимого <a href="https://github.com/defunkt/unicorn">unicorn&#8217;а</a>.<!--more--></p>

<p>Думаю, что такое логи и для чего они нужны все знают. А вот что такое ротация логов многие могут не знать. Или знать, что это такое, но не использовать в повседневной жизни (к коим относился я до недавних пор).</p>

<p>Ротация логов &ndash; это, если простыми словами, то простой сдвиг, после которого текущий файл логов &ldquo;обрубается&rdquo;, архивируется (по  желанию) и логи начинают писаться в чистый файл. Для ротации логов используют logrotate, конфигурационные файлы которого можно найти в <em>/etc/logrotate.d/</em>. Скорее всего, у вас на сервере эта папка не пуста и можно найти конфиги для postgresql&#8217;а, nginx&#8217;а и много чего еще.</p>

<p>Мы же с вами рассмотрим настройку ротации логов для unicorn&#8217;а. Если ваш ресурс посещает множество людей, то лог файл (production.log) становится нескромно большим, т.к. хранит все обращения ко всем страницам, все произошедшие ошибки и прочую информацию. Для того, чтобы этого избежать, создадим файл <em>/etc/logrorate.d/#{your_app_name}</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"/home/deployer/projects/#{your_app_name}/shared/log/production.log"
</span><span class='line'>{
</span><span class='line'>  daily
</span><span class='line'>  missingok
</span><span class='line'>  rotate 180
</span><span class='line'>  compress
</span><span class='line'>  dateext
</span><span class='line'>
</span><span class='line'>  delaycompress
</span><span class='line'>
</span><span class='line'>  lastaction
</span><span class='line'>    pid=/home/deployer/projects/#{your_app_name}/shared/pids/unicorn.pid
</span><span class='line'>    test -s $pid && kill -USR1 "$(cat $pid)"
</span><span class='line'>  endscript
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Теперь по порядку:</p>

<ul>
<li>в кавычках мы указываем какие файлы будут &ldquo;вращаться&rdquo;, можно использовать &ldquo;*&rdquo; для нескольких файлов</li>
<li><strong>daily</strong> &ndash; сообщает logrotate &ldquo;прокручивать&rdquo; файл(ы) логов раз в день.</li>
<li><strong>missingok</strong> &ndash; не выдавать ошибочное сообщение, если файл логов отсутствует.</li>
<li><strong>rotate</strong> &ndash; лог будет &ldquo;сдвинут&rdquo; 180 раз, прежде, чем будет удален.</li>
<li><strong>compress</strong> &ndash; старые файлы будут заархивированы (gzip по умолчанию) для того, чтобы занимать меньше места.</li>
<li><strong>dateext</strong> &ndash; полезная опция, которая дописывает в название файла дату, формат можно изменить опцией <strong>dateformat</strong> вместо скучных названий, вроде (blog.log.1)</li>
<li><strong>delaycompress</strong> &ndash; откладывает сжатие на один цикл</li>
<li><strong>lastaction и endscript</strong> &ndash; строки между данными директивами будут выполнены (с применением /bin/sh) после каждой ротации. Мы используем их, чтобы сообщить unicorn&#8217;у и всем его воркерам (USR1 сигнал) заново открыть файлы логов.</li>
</ul>


<p>После того, как мы написали конфиг, мы должны сообщить logrotate об этом, я предпочитаю сделать это с флагом <strong>-f (force)</strong>, который заново считывает свои конфиги делает один &ldquo;оборот&rdquo; логов.</p>

<p><code>sudo logrotate -f /etc/logrotate.d/#{your_app_name}</code></p>

<p>Как вы, наверное, уже догадались, #{your_app_name} необходимо заменить именем вашего приложения. После прочтения данного поста, вы с легкостью сможете настроить ротацию логов для чего угодно. Удачи вам и не теряйте свои логи :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(бес)Полезные ссылки #3]]></title>
    <link href="http://zudochkin.ru/2013/07/useless-links-3"/>
    <updated>2013-07-14T15:53:24+04:00</updated>
    <id>http://zudochkin.ru/2013/07/useless-links-3</id>
    <content type="html"><![CDATA[<p>Вот и очередной, третий по счету выпуск (бес)Полезных ссылок.<!--more--></p>

<h5>Ruby and Rails</h5>

<ul>
<li><a href="http://about.travis-ci.org/blog/2013-07-09-introducing-continuous-deployment-to-heroku/">Интеграция Heroku and TravisCI</a></li>
<li><a href="http://blog.lunarlogicpolska.com/2013/declutter-lib-directory/">Приводим в порядок lib директорию в своем Ruby on Rails проекте </a></li>
<li><a href="https://github.com/koudelka/asbestos">DSL для написаний правил для firewall&#8217;ов</a></li>
<li><a href="http://www.codebeerstartups.com/2013/07/better-way-to-parse-user-info-from-omniauth-hash/">Better Way to Parse User Info From Omniauth Hash</a></li>
<li><a href="http://raysrashmi.com/2013/07/09/rails4-directory-structure/">Новое в организации директорий в приложении на Ruby on Rails 4</a></li>
<li>Интервью с создателем Ruby Yukihiro “Matz&#8221; Matsumoto <a href="http://fredwu.me/post/54175219257/the-future-of-computing-the-future-of-computer">о будущем компьютерных технологий</a></li>
<li>Вышла <a href="http://myronmars.to/n/dev-blog/2013/07/rspec-2-14-is-released">новая версия RSpec&#8217;а 2.14</a>, включающая в себя много интересных &ldquo;плюшек&rdquo;</li>
<li>Интересное видео <a href="http://www.youtube.com/watch?v=5ZjwEPupybw">&ldquo;Функциональное программирование и Ruby&rdquo;</a></li>
<li><a href="http://rubysource.com/the-self-pipe-trick-explained/">В этой статье немного о unix процессах, сигналах, пайпах и одновременном выполнении команд в проессах</a></li>
<li>Реализовываем аутентификацию вместе с гемом <a href="http://pothibo.com/2013/07/authentication-with-warden-devise-less/">Warden, но без Devise&#8217;а</a></li>
<li><a href="https://github.com/mislav/git-deploy">Деплой Heroku-style</a></li>
</ul>


<h5>JavaScript</h5>

<ul>
<li><a href="http://hub.tutsplus.com/tutorials/required-javascript-reading--net-33131">Список интересного чтива</a></li>
</ul>


<h5>Objective-C</h5>

<ul>
<li>Кто когда-либо разрабатывал приложения в Xcode, обязательно сталкивался с применением CocoaPods (что-то, вроде bundler&#8217;а для приложения для iOS или MacOS). Но тут ребята пошли еще дальше, и интегрировали <a href="https://github.com/kattrali/cocoapods-xcode-plugin">CocoaPods прямо в Xcode</a>). <strong>Работает только в Xcode 5 версии, которая доступна лишь разработчикам</strong>.</li>
<li><a href="http://www.macdigger.ru/iphone-ipod/vse-osobennosti-ios-7-beta-3-v-odnoj-state-obnovlenie.html">Вышла третья beta iOS7</a>, список изменений можно прочитать на сайте macdigger.</li>
</ul>


<h5>Other stuff</h5>

<ul>
<li>Для тех, кто не прочитал <a href="https://github.com/jsmarkus/the-little-mongodb-book/blob/master/ru/mongodb.markdown">The little mongodb book на русском языке</a>, рекомендую.</li>
<li><a href="http://therules.ru/">Правила русского языка для тех, кто хочет писать грамотно</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(бес)Полезные ссылки #2]]></title>
    <link href="http://zudochkin.ru/2013/07/useless-links-2"/>
    <updated>2013-07-08T15:56:24+04:00</updated>
    <id>http://zudochkin.ru/2013/07/useless-links-2</id>
    <content type="html"><![CDATA[<p>Вот уже второй выпуск в рубрике (бес)Полезные ссылки. На этот раз, надеюсь, выпуск выйдет без опозданий :)</p>

<p>Итак, поехали.<!--more--></p>

<p>Т.к. к списку моих интересов несколько месяцев назад добавился еще и Objective-C и разработка под мобильные iOS устройства, то нет-нет будут проскакивать интересные штуки и про него.</p>

<h5>Сервис недели</h5>

<p>Товарищ <a href="https://twitter.com/newsergey">Сергей Анисимов</a> подкинул ссылку на преинтереснейший сервис, позволяющий, как заявляют его создатели развернуть девелоперское окружение за 60 секнуд.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-07-useless-links-2/Screenshot_2013-07-08_11.52.57.png"></p>

<ul>
<li>Данное чудо поддерживает Ruby and Rails, Python and Django, nodeJS и Go.</li>
<li>Предоставляет мощную IDE с полноценным Linux шеллом.</li>
<li>Поддерживает совместную работу над проектом с другими членами команды.</li>
<li>И все это можно показать другим людям, потому веб-сервер смотрит наружу. (Необходимо, хотя бы для общего развития, посмотреть видос, который есть у них на сайте, показывающий все вышеназванные пункты)</li>
</ul>


<p>Не пугайтесь, даю <a href="https://www.nitrous.io/join/5JyOqcCTRJU">ссылку на сервис со своей реферальной ссылкой</a>, пройдя и зарегестрировавшись по которой вы получите дополнительные нитро (внутренняя валюта).</p>

<h5>iOS</h5>

<ul>
<li>на просторах интернетов нашел очередной интересный блог с не менее интересным названием <a href="http://nshipster.com/">NSHipster</a>, особенно мне понравился <a href="http://nshipster.com/core-data-libraries-and-utilities/">пост про CoreData</a> со списком утилит и полезных библиотек</li>
</ul>


<h5>Ruby and Rails</h5>

<ul>
<li><a href="http://www.codebeerstartups.com/2013/04/must-have-gems-for-development-machine-in-ruby-on-rails/">Список гемов</a>, которые очень облегчают жизнь Ruby on Rails разработчику на локальной машине, про многие не слышал, но большинство использую сам, поэтому welcome.</li>
<li><a href="http://www.ruby-lang.org/en/news/2013/06/30/we-retire-1-8-7/">Прекращена поддержка Ruby 1.8.7</a></li>
<li>Интересная вводная статья для начинающих, кто хочет понять как <a href="http://net.tutsplus.com/tutorials/exploring-rack/">работает Rack от nettuts+</a></li>
<li>Если кто упустил <a href="https://blog.engineyard.com/2013/whats-new-and-awesome-in-ruby-2">изменения в Ruby 2 и в Ruby on Rails 4 от компании EngineYard</a>, то прошу проследовать по ссылке, которая исправит этот изъян.</li>
<li><a href="https://github.com/jrochkind/fake_work_app/blob/master/README.md">Больший синтетический тест, разных веб серверов, написанных на Ruby</a></li>
<li>Если хочется отдохнуть немного от Рельсов и посмотреть что-то стоящее по Руби, рекомендую видео <a href="http://www.youtube.com/watch?v=2aYdtS7FZJA">&ldquo;Building a Mocking Library&rdquo;</a> от мейнтейнера RSpec&#8217;а</li>
</ul>


<h5>Other stuff</h5>

<ul>
<li>Очень <a href="http://www.goodui.org/">красивый одностраничный сайт</a>, посвященный хорошему тону в проектировании UI</li>
<li>Вышел наконец-таки один из популярнейших текстовых редакторов <a href="http://www.sublimetext.com/blog/articles/sublime-text-3-public-beta">Sublime Text 3 Public Beta</a>, так ожидаемый многими. Это второй после MacVim&#8217;а текстовый редактор, который я очень часто использую, чтобы почитать исходники гемов, рубей и прочие большие проекты.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(бес)Полезные ссылки #1]]></title>
    <link href="http://zudochkin.ru/2013/07/useless-links-1"/>
    <updated>2013-07-04T15:56:24+04:00</updated>
    <id>http://zudochkin.ru/2013/07/useless-links-1</id>
    <content type="html"><![CDATA[<p><em>Пишу с небольшим опозданием, потому как выходные выдались очень бурные и я ничего не успел сделать :)</em></p>

<p>Давно хотел завести какую-нибудь рубрику на сайте, где можно постить ссылки, подводить итоги недели или месяца без длинных, нудных описаний. Так вот, встречаем, рубрика, (бес)Полезные ссылки, название говорит само за себя, для кого-то ссылки окажутся бесполезными, я же считаю их полезными для себя. Ну, поехали. <!--more--></p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-useless-links-1/Screen_Shot_2013-07-04_at_11.58.10_AM.png"></p>

<ul>
<li>мой первый, пока очень незначительный, <a href="https://github.com/rails/rails/pull/11098">коммит</a> в Ruby on Rails</li>
<li>выход стабильной &ldquo;четверки&rdquo; (<a href="http://weblog.rubyonrails.org/2013/6/25/Rails-4-0-final/">ruby on rails 4</a>), список изменений в которой можно почерпнуть отсюда:

<ul>
<li><a href="https://github.com/rails/rails/blob/v4.0.0/actionpack/CHANGELOG.md">actionpack</a></li>
<li><a href="https://github.com/rails/rails/blob/v4.0.0/activemodel/CHANGELOG.md">activemodel</a></li>
<li><a href="https://github.com/rails/rails/blob/v4.0.0/activerecord/CHANGELOG.md">activerecord</a></li>
<li><a href="https://github.com/rails/rails/blob/v4.0.0/activesupport/CHANGELOG.md">activesupport</a></li>
<li><a href="https://github.com/rails/rails/blob/v4.0.0/railties/CHANGELOG.md">railties</a></li>
</ul>
</li>
<li>пост про <a href="http://www.bthlabs.pl/post/fun_with_postgresql_tagging_blog_posts.html">тегирование средствами PostgreSQL</a> и небольшой сравнительный анализ производительности (теги средствами массивов в PostgreSQL и теги, как ассоциация)</li>
<li><a href="http://progrium.com/localtunnel/">gem localtunnel</a>, который я открыл для себя на этой неделе, позволяющий расшарить свой локальный сервер, запущенный на каком-нибудь порте, для доступа со всех интернетов по адресу, к примеру <em>http://3bwz.localtunnel.com</em></li>
<li><a href="http://www.railsconf.com/2013/talks">много интересных докладов и презентаций</a> с конференции RailsConf, прошедшей в апреле-мае сего года в Портленде</li>
<li>исправление уязвимости <a href="http://www.ruby-lang.org/en/news/2013/06/27/hostname-check-bypassing-vulnerability-in-openssl-client-cve-2013-4073/">CVE-2013-4073</a> в SSL, патчи вышли сразу для всех рублей (<a href="http://www.ruby-lang.org/en/news/2013/06/27/ruby-1-8-7-p374-is-released/">1.8.7-p374</a>, <a href="http://www.ruby-lang.org/en/news/2013/06/27/ruby-1-9-3-p448-is-released/">1.9.3-p448</a>, <a href="http://www.ruby-lang.org/en/news/2013/06/27/ruby-2-0-0-p247-is-released/">2.0.0-p247</a>)</li>
<li><a href="http://vimeo.com/68716827">40-минутный доклад</a> с кратким описанием возможностей следующей версии JavaScript ECMAScript 6</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devconf 2013 - мои впечатления, ссылки на доклады и несколько фоток :)]]></title>
    <link href="http://zudochkin.ru/2013/06/devconf"/>
    <updated>2013-06-18T21:31:24+04:00</updated>
    <id>http://zudochkin.ru/2013/06/devconf</id>
    <content type="html"><![CDATA[<p>Прошло 4 года с моего последнего и в то же время первого визита на конференцию разработчиков. 4 года назад сидел я в секции #php и почти не понимал что происходит, не понимал о каких проблемах говорят докладчики, но для меня это было, однозначно, в новинку и очень интересным. В течение всех этих лет желание посещать технические конференции только росло, но возможности, к сожалению, предоставлялось из-за не очень заинтересованных в этом работодателей. <!--more--></p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/devconf2010.gif"></p>

<p>Чуть больше года назад я сменил язык разработки и окончательно перешел на Ruby. Теперь желание заключалось в том, чтобы посетить Ruby секцию на той же <a href="http://devconf.ru/">DevConf</a>. И вот, наконец, минимечта сбылась, и я на конференции.</p>

<p>К сожалению, пришлось немного опоздать из-за того, что любовь ко сну немного пересилила любовь к получению новых знаний.</p>

<h3>Доклады</h3>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/2013-06-14_11.16.27.jpg"></p>

<p>И вот регистрация и начало нового доклада, который не хотелось пропускать, ведь выступал чел, забаненный на Github&#8217;е, специалист по безопасности <a href="https://twitter.com/homakov" title="@homakov">Егор Хомяков</a> со своим докладом &ldquo;Безопасный сайт на примере Rails&rdquo;. Его рассказал про всевозможные атаки в web&#8217;е, как с ними бороться нужно и как эти проблемы решают (или как не решают) нами любимые рельсы. Узнал много нового о типах атаках и способов защиты с ними. <a href="http://f.cl.ly/items/2G3g462j2T0o1w0g3K2o/rails%20and%20security.pdf" title="Безопасный сайт на примере Rails">Презентацию</a> помог достать из интернетов товарищ <a href="https://twitter.com/milushov">roma</a>, за что ему отдельное спасибо.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/2013-06-14_11.04.56.jpg"></p>

<p>Дальше был кофебрейк, на котором было сложно протиснуться, поэтому кофе попить не удалось, ну, хоть, водички попили.</p>

<p>После кофебрейка удалось таки занять сидячие места и спокойно с интересом послушать очередного докладчика, которым оказался разработчик из Питера Николай Рыжиков, рассказавший нам о <a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Проблемно-ориантированное проектирование">DDD</a> в <a href="http://f.cl.ly/items/2b3C0H3S0n2a473x1M3Z/DDD%20on%20rails.pdf">докладе</a> под названием <strong>&ldquo;Domain Driven Design on Rails&rdquo;</strong>. Я очень часто слышал эту аббревиатуру, но так до конца и не понимал что это, как это готовить и как использовать в своих проектах (и сейчас не понимаю, но я научусь).</p>

<p>После очередного интересного доклада, после которого захотелось освоить эти забавные, но еще так непонятные 3D, мы послушали <a href="http://www.slideshare.net/profyclub_ru/13-20022107">доклад</a> с громким названием <strong>&ldquo;Быстрое тестирование Ruby on Rails&rdquo;</strong> от Александра Балашова, из компании-спонсора DevConf Evrone. Рассказ получился очень поверхностным, который можно уложить в одно приложение: <em>&ldquo;Используйте поменьше обращений к БД и юзайте <a href="https://github.com/jonleighton/spring">Spring</a>, <a href="https://github.com/burke/zeus">Zeus</a> или <a href="https://github.com/sporkrb/spork">spork</a> для ускорения запуска приложения&rdquo;</em>.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/2013-06-14_13.57.20.jpg"></p>

<p>Следующий доклад <strong>&ldquo;Проектирование API&rdquo;</strong> прочитал <a href="https://twitter.com/igkuz" title="@igkuz">Игорь Кузнецов</a> &ndash; Ruby разработчик из Undev.ru. Этот доклад я очень хотел послушать, потому что реализовывать API самому не приходилось,  а очень хотелось попробовать написать что-то подобное, наступая на &ldquo;подводные камни&rdquo;. Но, к сожалению, вопросов, которые я бы хотел услышать в докладе не освещалось, а именно аутентификация и больше практических советов, аля как использовать rails-api в связке с гемом devise, какие есть костыли и прочее. Но автор коснулся лишь теоретических основ проектирования API, что тоже было очень интересно послушать, кое-что я занес в заметки, чтобы в дальнейшем посмотреть. Интересно было рассказано про версионирование: отличие мажорной и минорной версии, какие изменения должно увеличивать мажорную, а какие минорную версию. И, конечно же стоит отметить упоминания автором доклада темы <a href="http://json-schema.org/">JSON Schema</a>, которая одновременно является и документацией для API, и валидатором.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/2013-06-14_14.40.35.jpg"></p>

<p>После доклада, который закончился немного раньше мы двинули на обед, благо, что нас отпустили немного раньше положенного времени, ибо, когда мы уходили с обеда очередь за едой была километровая. Покормили знатно, как в Египте прям, шведский стол, куча блюд и куча сладостей с фондю. В общем обед придал новых сил и мы двинули на очередной доклад.</p>

<p>Александров Игорь из компании JetRockets рассказал нам о <a href="https://speakerdeck.com/alexandrov/billing-in-rails-saas-applications">&ldquo;Биллинге в SaaS-системах на Rails&rdquo;</a>. Перед каждым, кто принимает платежи в своих проектах обязательно встает вопрос отдавать биллинг на аутсорс или реализовывать свою систему оплаты. Игорь рассказал и про плюсы, и про минусы обеих систем. Дальше рассказал про путь, в котором вы разрабатывает свою систему: биллинговый интервал и страшное название <strong>PCI-compliant</strong>, являющееся набором требований для организаций, сервисов, которые работают с платежными данными пользователей. Специально для Devconf 2013 было разработано приложение <a href="https://github.com/igor-alexandrov/spaceship" title="Demo application for DevConf 2013">SpaceShip</a>, показывающее все, что сказал автор доклада: биллинговые периоды, тарифы и пр.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/2013-06-14_16.48.29.jpg"></p>

<p>Ну а дальше был апофеоз всего Devconf&#8217;а, доклад, ради которого стоило пойти на конференцию, даже если бы не было вкусного обеда  и остальных докладчиков. <a href="http://kaize.ru/" title="ортодоксальный приверженец SOLID-принципа">Кирилл Мокевнин</a>, известный и php мире, и в мире Ruby on Rails, превосходный докладчик и специалист, разбирающийся в своем деле. Доклад назывался <a href="https://speakerdeck.com/mokevnin/arkhitiekturnyie-praktiki-v-rails">&ldquo;Архитектурные практики в Rails&rdquo;</a>, где Кирилл поделился со слушателями своим опытом разработки, рассказал о проблемах, с которыми сталкивался и как их решал сам.
Были описаны следующие проблемы:</p>

<ul>
<li>Организация иерархии в  папках с контроллерами и моделями, <a href="http://habrahabr.ru/post/136461/" title="Ссылка автора на свой пост на Хабрахабре">наименования модулей</a> и написание удобных правил в <code>config/routes.rb</code>.</li>
<li>Ссылки в js, замечатели ли вы что очень часто пишем в javascript-coffescript файлах, нечто похожее на &ldquo;/posts/#{post.slug}&rdquo;, Кирилл рекомендует использовать для этих целей гем <a href="https://github.com/railsware/js-routes/" title="Bringing Rails named routes to javascript">js-routes</a>.</li>
<li>Использовать для фильрации и сортировки гем <a href="https://github.com/ernie/ransack" title="Object-based searching. The successor to MetaSearch">ransack</a>. Данный гем не пробовал, поэтому ничего пока сказать не могу.</li>
<li>Также автор затронул вопрос DDD, чем однозначно убедил прочитать в ближайшее время книгу Эрика Эванса &ldquo;Domain-Driven Design. Tackling Complexity in the Heart of Software&rdquo;</li>
<li>Также несколько примеров, которые приводит Кирилл

<ul>
<li><a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/" title="7 Patterns to Refactor Fat ActiveRecord Models">7 Patterns to Refactor Fat ActiveRecord Models</a></li>
<li><a href="https://github.com/kaize/nastachku">Проект nastachku.ru на Github&#8217;е</a></li>
<li>не стесняйтесь использовать custom inputs в simple_form</li>
<li>используйте gem версии популярных js библиотек, иначе вы забываете их обновлять :) <a href="https://github.com/grosser/vendorer" title="Vendorer keeps your dependencies documented, cached and up to date">Gem Vendorer, если нет гема для библиотеки, которую вы используете</a></li>
<li>before фильтры, а также before_validate &ndash; зло</li>
</ul>
</li>
</ul>


<p>К сожалению, после этого доклада пришлось покинуть конференцию, сожалея только о том, что пропущу очередной доклад Кирилла Мокевнина &ldquo;Ментальное программирование&rdquo;, но его по техническим причинам прервали. Сам Кирилл, предлагает посмотреть <a href="http://www.youtube.com/watch?v=eEEHWQNuCLQ" title="Ментальное программирование">видео</a> на Youtube&#8217;e с его предыдущим выступлением, которое называется также.</p>

<h3>Подводя итоги</h3>

<p>… хочется сказать, что конференция была очень поучительна, но почему-то я ожидал от нее большего. Многие вопросы, которые освещались были мне знакомы, поэтому я прослушал их как чужое мнение на вопросы, с которыми приходилось иметь дело.
Но, вцелом, хочется поблагодарить спонсоров и огранизаторов конференции за такую замечательную конференцию, которая дает &ldquo;волшебный пендель&rdquo;, прививает очередную порцию любви к программированию и дает пообщаться с коллегами по цеху о методах решения тех или иных вопросов :)</p>

<h3>P.S.</h3>

<p>Несколько дней писал данный пост, вносил кучу дополнений и изменений, но, думаю, что на этом достаточно, иначе пост никогда не увидит свет.</p>

<h3>P.S. №2</h3>

<p>Презентации с доклада, которые пропустил:</p>

<ul>
<li>от <a href="https://twitter.com/makaroni4" title="@makaroni4">Анаталия Макаревича</a> <a href="http://www.slideshare.net/profyclub_ru/12-20022066">&ldquo;Рефакторинг Ruby кода&rdquo;</a></li>
<li>от <a href="https://twitter.com/killthekitten" title="@killthekitten">Николая Шебанова</a> <a href="http://www.slideshare.net/profyclub_ru/14-20022236">&ldquo;Спасение утопающих &ndash; покрываем тестами взрослый Ruby on Rails проект&rdquo;</a></li>
</ul>


<h3>P.S. №3</h3>

<p>Зарабатываю кружечку от Reg.ru, поднимая тяжести. <img class="image" src="http://zudochkin.ru/images/posts/2013-06-devconf/13.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Парсим news.ycombinator.com или не рельсами едиными жив человек (Sinatra, DataMapper)]]></title>
    <link href="http://zudochkin.ru/2013/03/sinatra-datamapper-news-combinator"/>
    <updated>2013-03-05T23:29:26+04:00</updated>
    <id>http://zudochkin.ru/2013/03/sinatra-datamapper-news-combinator</id>
    <content type="html"><![CDATA[<p>Дело было вечером, делать было нечего и решил я написать небольшое приложение на Sinatra с Datamapper&#8217;ом. За идеей далеко ходить также не пришлось: решил написать небольшой &ldquo;фильтратор&rdquo; интересного для меня контента из новостей news.ycombinator.ru.<!-- more --> Не стал изобретать велосипед на этот раз и интересными буду считать новости, названия которых содержат определенные слова. Будем отображать список прочитанных и непрочитанных новостей. Список новостей каждый час будет обновляться по cron&#8217;у &ndash; вот и вся задача.</p>

<p>Начнем с реализации: для этого нам понадобится:</p>

<ul>
<li>data_mapper с двумя адаптерами (sqlite3 для локального использование и postgresql для production&#8217;а)</li>
<li>sinatra</li>
<li>coffeeScript, хоть можно было и легко обойтись без него</li>
<li>slim в качестве шаблонизатора</li>
</ul>


<p>Итак, поехали:</p>

<p>Gemfile:</p>

<div>
  <pre><code class='ruby'>source &#39;https://rubygems.org&#39;

gem &#39;sinatra&#39;
gem &#39;data_mapper&#39;

group :development do
  gem &#39;dm-sqlite-adapter&#39;
  gem &#39;capistrano&#39;
end

group :production do
  gem &#39;dm-postgres-adapter&#39;
end

gem &#39;slim&#39;
gem &#39;coffee-script&#39;
gem &#39;whenever&#39;, :require =&gt; false

gem &#39;nokogiri&#39;

gem &#39;unicorn&#39;</code></pre>
</div>


<p>В нем нет ничего необычного, добавляем необходимые гемы для разных сред.</p>

<p>Теперь самое интересное: основной файл приложения, который занимает больше всего места.</p>

<p>./app.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;slim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;coffee-script&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;data_mapper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">DataMapper</span><span class="p">:</span><span class="ss">:Property</span><span class="o">::</span><span class="nb">String</span><span class="o">.</span><span class="n">length</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">configure</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DataMapper</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="s1">&#39;sqlite3:./db/articles.db&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">configure</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">DataMapper</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="s1">&#39;postgres://deployer:funnydb@localhost/ycombinator&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">DataMapper</span><span class="p">:</span><span class="ss">:Resource</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">INTERESTING_KEYWORDS</span> <span class="o">=</span> <span class="sx">%w(ruby rails coffee js javascript ember angular</span>
</span><span class='line'><span class="sx">    backbone tdd rspec shoulda gem unicorn nginx sinatra vim mac)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:id</span><span class="p">,</span> <span class="no">Serial</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:url</span><span class="p">,</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">:unique_index</span> <span class="o">=&gt;</span> <span class="ss">:u</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="ss">:url</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:title</span><span class="p">,</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:index</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:interesting</span><span class="p">,</span> <span class="no">Boolean</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:read_at</span><span class="p">,</span> <span class="no">DateTime</span>
</span><span class='line'>  <span class="n">timestamps</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:updated_on</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">interesting?</span>
</span><span class='line'>    <span class="o">!!</span><span class="p">(</span><span class="n">title</span> <span class="o">=~</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">INTERESTING_KEYWORDS</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">),</span> <span class="ss">Regexp</span><span class="p">:</span><span class="ss">:IGNORECASE</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">interesting_to_me</span>
</span><span class='line'>    <span class="n">all</span><span class="p">(</span><span class="ss">:interesting</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">unread</span>
</span><span class='line'>    <span class="n">all</span><span class="p">(</span><span class="ss">:read_at</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">read</span>
</span><span class='line'>    <span class="n">all</span><span class="p">(</span><span class="ss">:read_at</span><span class="o">.</span><span class="n">not</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="n">term</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">DataMapper</span><span class="o">.</span><span class="n">repository</span><span class="o">.</span><span class="n">adapter</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:scheme</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'>      <span class="n">all</span><span class="p">(</span><span class="ss">:title</span><span class="o">.</span><span class="n">like</span> <span class="o">=&gt;</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">term</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">all</span><span class="p">(</span><span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;title ILIKE ?&#39;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">term</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">%&quot;</span> <span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">DataMapper</span><span class="o">.</span><span class="n">finalize</span>
</span><span class='line'><span class="c1">#DataMapper.auto_migrate!</span>
</span><span class='line'><span class="no">DataMapper</span><span class="o">.</span><span class="n">auto_upgrade!</span>
</span><span class='line'>
</span><span class='line'><span class="n">helpers</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_process</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@search_term</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:term</span><span class="o">].</span><span class="n">nil?</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:term</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@articles</span> <span class="o">=</span> <span class="k">case</span> <span class="n">scope</span>
</span><span class='line'>                <span class="k">when</span> <span class="ss">:all</span>
</span><span class='line'>                  <span class="no">Article</span>
</span><span class='line'>                <span class="k">when</span> <span class="ss">:all_read</span>
</span><span class='line'>                  <span class="no">Article</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>                <span class="k">when</span> <span class="ss">:all_unread</span>
</span><span class='line'>                  <span class="no">Article</span><span class="o">.</span><span class="n">unread</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                  <span class="no">Article</span><span class="o">.</span><span class="n">interesting_to_me</span><span class="o">.</span><span class="n">unread</span>
</span><span class='line'>                <span class="k">end</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="vi">@search_term</span><span class="p">)</span>
</span><span class='line'>    <span class="n">slim</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/application.js&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">coffee</span> <span class="ss">:application</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;/:id/read&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@article</span><span class="o">.</span><span class="n">read_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="vi">@article</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/all&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">do_process</span> <span class="ss">:all</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/all/read&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">do_process</span> <span class="ss">:all_read</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/all/unread&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">do_process</span> <span class="ss">:all_unread</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/*&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">do_process</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>А теперь немного комментариев:</p>

<ul>
<li><p><strong>1-5 строки</strong> &ndash; подключаем необходимые для работы файлы</p></li>
<li><p><strong>7 строка</strong> &ndash; сообщаем DataMapper&#8217;y, что длина строки (String) не 80 символов, а 400, 255 не хватает.</p></li>
<li><p><strong>9-15</strong> &ndash; конфигурируем два адаптера: один для разработки, другой для продакшна.</p></li>
<li><p><strong>17-53</strong></p>

<ul>
<li><p><strong>20,21</strong> &ndash; объявляем интересные мне ключевые слова</p></li>
<li><p><strong>23-28</strong> &ndash; описываем все поля, которые будут в нашей модели</p></li>
<li><p><strong>30-32</strong> &ndash; метод interesting? определяет по заголовку новости интересна она мне или нет</p></li>
<li><p><strong>34-40</strong> &ndash; несколько используемых в приложении scope&#8217;ов</p></li>
<li><p><strong>46-52</strong> &ndash; метод search (из-за того, что в Postgresql like учитывает регистр букв, пришлось переписать оператор поиска на ilike, который этого не делает)</p></li>
</ul>
</li>
<li><p><strong>60-73</strong> &ndash; объявляем метод, который является &ldquo;сердцем&rdquo; и в зависимости от параметра заполняет коллекцию определенными статьями и рендерит вьюху ./views/index.slim</p></li>
<li><p><strong>76-78</strong> &ndash; рендерим coffeeScript, которые делает следующее, если мы кликам по новости, то отправляем ajax post запрос и помечаем новость как прочитанную (read_at = Time.now)</p></li>
<li><p><strong>80-84</strong> &ndash; сам метод, который помечает новость прочитанной при post запросе</p></li>
<li><p><strong>86-100</strong> &ndash; разные коллекции (все, прочитанные, непрочитанные и т.д.)</p></li>
</ul>


<p>теперь Rakefile, который будет парсить news.ycombinator.com каждый час</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Parse all articles&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:parse</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://news.ycombinator.com/&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">links</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;td.title a&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">next_page_link</span> <span class="o">=</span> <span class="n">links</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">links</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">link</span><span class="o">|</span>
</span><span class='line'>    <span class="n">href</span> <span class="o">=</span> <span class="n">link</span><span class="o">[</span><span class="ss">:href</span><span class="o">]</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">link</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="no">Article</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">href</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Article</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">href</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Update Interesting tasks&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:update_interesting</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Article</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">:interesting</span> <span class="o">=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">interesting?</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> updated&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В нем всего две задачи: первая &ndash; парсит новости, вторая нужна для того, что если вдруг изменися интересные ключевые слова, то вы сможете легко обновить список инетересных вам новостей.</p>

<p>Файл, который отвечает за частоту выполнения определенных тасков ./config/shedule.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="s1">&#39;/home/deployer/projects/ycombinator/shared/log/shedule.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">job_type</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;cd :path &amp;&amp; RACK_ENV=:environment bundle exec rake :task --silent :output&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="ss">:hour</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s1">&#39;parse&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В первой строчке я указываю путь до файла с логами, чтобы каждый раз при запуске rake task&#8217;а в конец добавлялось время последнего обновления. В блоке с every можно очень гибко указать как часто выполняться, смотрите документацию к гему whenever.</p>

<p>Также я добавил несколько строк к файлу, выполняющего деплой из <a href="http://zudochkin.ru/unicorn-rbenv-nginx-postgresql/">Разворачиваем Rails приложение вместе с Capistrano</a>. ./config/deploy.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;ycombinator&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:whenever_command</span><span class="p">,</span> <span class="s2">&quot;bundle exec whenever&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;whenever/capistrano&quot;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь мы можем запустить обновления cron&#8217;а deployer&#8217;а командой <code>cap whenever:update_crontab</code></p>

<p>После ее запуска вы можете проверить, что вышло, обновился ли cron, запустив на сервере, список cron задач: <code>crontab -l</code></p>

<p>Без комментариев оставлю вьюхи, но текст их приведу.</p>

<p>./views/application.coffee</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&quot;.article&quot;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;id&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/read&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">(</span><span class="s">&#39;li&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>./views/layout.slim</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">doctype</span> <span class="n">html</span>
</span><span class='line'>
</span><span class='line'><span class="n">head</span>
</span><span class='line'>  <span class="n">title</span> <span class="no">Ycombinator</span>
</span><span class='line'>  <span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;</span>
</span><span class='line'>  <span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;/application.js&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">body</span>
</span><span class='line'>  <span class="n">a</span><span class="p">{</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;/all&quot;</span> <span class="p">}</span> <span class="no">All</span>
</span><span class='line'>  <span class="n">br</span>
</span><span class='line'>  <span class="n">a</span><span class="p">{</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;/all/read&quot;</span> <span class="p">}</span> <span class="no">All</span> <span class="n">read</span>
</span><span class='line'>  <span class="n">br</span>
</span><span class='line'>  <span class="n">a</span><span class="p">{</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;/all/unread&quot;</span> <span class="p">}</span> <span class="no">All</span> <span class="n">unread</span>
</span><span class='line'>  <span class="n">br</span>
</span><span class='line'>  <span class="n">a</span><span class="p">{</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span> <span class="p">}</span> <span class="no">Home</span>
</span><span class='line'>  <span class="n">hr</span>
</span><span class='line'>  <span class="o">==</span> <span class="k">yield</span>
</span></code></pre></td></tr></table></div></figure>


<p>И наконец, ./views/index.slim</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span>
</span><span class='line'>  <span class="s1">&#39; Unread articles</span>
</span><span class='line'><span class="s1">  - if @search_term</span>
</span><span class='line'><span class="s1">    = &quot;searched by: &#39;</span><span class="c1">#{ @search_term }&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Search</span> <span class="n">form</span>
</span><span class='line'><span class="n">form</span><span class="p">{</span> <span class="nb">method</span><span class="o">=</span><span class="s2">&quot;get&quot;</span> <span class="n">action</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">input</span><span class="p">{</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;term&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">#{</span> <span class="vi">@search_term</span> <span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">input</span><span class="p">{</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Find&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="vi">@search_term</span>
</span><span class='line'>  <span class="n">a</span><span class="p">{</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;/&quot;</span> <span class="p">}</span> <span class="no">Home</span>
</span><span class='line'>
</span><span class='line'><span class="n">ul</span>
</span><span class='line'>  <span class="o">-</span> <span class="vi">@articles</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span>
</span><span class='line'>    <span class="n">li</span>
</span><span class='line'>      <span class="n">a</span><span class="p">{</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">#{</span> <span class="n">article</span><span class="o">.</span><span class="n">url</span> <span class="si">}</span><span class="s2">&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">#{</span> <span class="n">article</span><span class="o">.</span><span class="n">id</span> <span class="si">}</span><span class="s2">&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;article&quot;</span> <span class="n">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">=</span> <span class="n">article</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>Получислось такое незамысловатое и некрасивое приложение :).</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-03-sinatra-datamapper-news-combinator/Screen-Shot-2013-03-05-at-10.33.43-PM.png"></p>

<p>Вместо заключения: чтобы мозги не были напичканы только рельсами (читать как одним фреймворком), мне кажется, необходимо покидать зону комфорта и писать небольшые приложения для души на смежных технологиях. Скажу честно, для того, чтобы реализовать это несложное приложение у меня ушло масса времени на чтение мануалов к Sinatra, DataMapper&#8217;у, нежели на написание кода. Но мне понравилось, практической ценности, конечно, приложение почти не имеет, но мозги размялись однозначно. Разминай мозги, коллега :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разворачиваем rails приложение вместе с capistrano]]></title>
    <link href="http://zudochkin.ru/2013/03/unicorn-rbenv-nginx-postgresql"/>
    <updated>2013-03-03T16:13:05+04:00</updated>
    <id>http://zudochkin.ru/2013/03/unicorn-rbenv-nginx-postgresql</id>
    <content type="html"><![CDATA[<p>Здравствуйте, дорогие друзья, сегодня я расскажу вам как быстро развернуть Ruby on Rails приложение на сервере. Если у вас маленькое приложение, которое посещает 10 человек в день, то вам достаточно будет задеплоить его на heroku (имею в виду бесплатный тариф) и не читать все то, что написано ниже. Если же у вас приложение побольше, то милости прошу на огонек.<!-- more --></p>

<h3>Сервер</h3>

<p>Сервер: я буду настраивать все на Ubuntu 12.04 (64x), но не думаю, что должны возникнуть сложности с подобной операционной системой. Если же появятся траблы, пишите в комментах, попытаемся решить вместе.</p>

<p>Итак, поехали, логинимся по root&#8217;ом и производим базовую настройку сервера. Я начинаю всегда с локалей, для этого делаю следующее.</p>

<p><strong>localedef ru_RU.UTF-8 -i ru_RU -fUTF-8</strong> и в файл <strong>/etc/default/locale</strong> добавляю</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG="ru_RU.UTF-8"
</span><span class='line'>LC_CTYPE="ru_RU.UTF-8"
</span><span class='line'>LC_NUMERIC=C
</span><span class='line'>LC_TIME=C
</span><span class='line'>LC_COLLATE=C
</span><span class='line'>LC_MESSAGES=C</span></code></pre></td></tr></table></div></figure>


<p>Затем создаем пользователя, от лица которого мы и будем все делать и наделим его привилегиями запускать команды через sudo.</p>

<p><code>useradd -m -g staff -s /bin/bash deployer &amp;&amp; passwd deployer</code> &ndash; создаем пользователя deployer в группе staff (флаг -g) и с домашней папкой /home/deployer (флаг -m), флаг -s назначает пользоватлю шел по умолчанию. И задаем ему пароль. В дальнейшем весь экшн будет производиться от имени этого пользователя.</p>

<p>Чтобы наш пользователь мог выполнять команды от рута, необходимо добавить его в группу в файл <strong>/etc/sudoers</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(%staff ALL=(ALL) ALL)</span></code></pre></td></tr></table></div></figure>


<p>Теперь выходим из под рута и логинимся под деплоером. Для того, чтобы не писать пароль каждый раз при входе, необходимо добавить на сервер инфо, что мы свои (авторизация по ключу).</p>

<p><code>cat ~/.ssh/id_rsa.pub | ssh deployer@server "mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys"</code></p>

<p>Если у кого на рабочей машине ubuntu, то они могут запустить эту операцию намного проще (ssh-copy-id deployer@server).</p>

<p>Проверяем, ssh deployer@server более не должно спрашивать пароль, а сразу же пустить нас на сервер.</p>

<p>Для удобства можно добавить в файл <strong>~/.ssh/config</strong>, чтобы удобно было заходить, печатая только <strong>ssh my_serv</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host my_serv
</span><span class='line'>  HostName server.com$
</span><span class='line'>  User deployer$
</span></code></pre></td></tr></table></div></figure>


<p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code> &ndash; обновляем все источники приложений и накатываем обновления</p>

<h3>Установка и базовая настройка Postgres&#8217;а</h3>

<p><code>sudo apt-get install postgresql libpq-dev</code> (второй пакет нужен для того, чтобы гем pg поставился)</p>

<p>Данная установка подразумевает, что вы не собираетесь соединяться с базой данных с других машин. По умолчанию в Ubuntu, Postgresql сконфигурирован так, чтобы использовать логин текущего пользователя, т.е. если вы вошли под пользователем deployer и в Postgresql есть пользователь deployer, то спрашивать пароль у вас никто не будет.</p>

<p><code>sudo -u postgres createuser --superuser $USER</code> (создаем пользователя deployer, который будет являться суперпользователем, этого делать не желательно, если у вас более, чем один проект, лучше под каждую бд создать отдельных пользователей с разными паролями)</p>

<p><code>sudo -u postgres psql</code> &ndash; запускаем postgres консоль</p>

<p>postgres=# \password deployer &ndash; задаем пароль для нашего пользователя (имя пользователя заменить на свое) &ndash; этот пароль будет использоваться в конфигах вашего приложения (config/database.yml)</p>

<p><code>createdb $USER</code> &ndash; создаем базу данных deployer</p>

<h3>Ставим rbenv, ruby и gem bundler</h3>

<p>Ставим все необходимое, чтобы склонировать репозиторий rbenv, установить последние ruby и пользоваться загрузкой картинок в наших приложениям (последние два пакета).</p>

<p><code>sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt1-dev autoconf libc6-dev libncurses5-dev libmagickcore-dev imagemagick</code></p>

<p>Теперь давайте перейдем к установки ruby с помощью rbenv и ruby-build. Здесь нет ничего не обычного, в основном все взято со страниц README rbenv и ruby-build.</p>

<h5>rbenv</h5>

<p><code>git clone git://github.com/sstephenson/rbenv.git ~/.rbenv</code></p>

<p><code>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile</code> &ndash; для доступа к команде rbenv</p>

<p><code>echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile</code> &ndash; для доступа к бинарникам установленных гемов и автокомплиту rbenv команд</p>

<p><code>exec $SHELL</code> &ndash; перезапускам шел</p>

<h5>ruby-build &ndash; для простой загрузки и сборки ruby из исходников</h5>

<p><code>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</code></p>

<p>устанвливаем ruby <code>rbenv install 1.9.3-p392</code> (для этого необходимо немало времени, поэтому наберитесь терпения, на машине с 512 оперативы эта операция занимает около 7 минут)</p>

<p>Пока приложение настраивается можно добавить пару строк в ~/.gemrc файл, для того, чтобы не устанавливать документацию вместе с гемами</p>

<p>install: &mdash;no-ri &mdash;no-rdoc
update: &mdash;no-ri &mdash;no-rdoc</p>

<p>после этого <code>rbenv global 1.9.3-p392</code> и <code>gem install bundler</code></p>

<h3>Локальное приложение для деплоя</h3>

<p>Теперь давайте подготовим наше локальное приложение (я для
этих целей создал простое приложение rails</p>

<p><code>rails new simple_deployment -T</code></p>

<p><code>rails g scaffold item name description:text</code> &ndash; для того, чтобы проверить и соединение с базой данных.</p>

<p>создадим файл .rbenv-version (<code>echo '1.9.3-p392' &gt; .rbenv-version</code>) для того, чтобы unicorn запускал необходимую версию ruby</p>

<p>также добавим в Gemfile gem unicorn и gem capistrano (последний в группу :development)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>и запустим в консоли <code>capify .</code> (capistrano создаст для нас файлик config/deploy.rb, который и будет &ldquo;пультом управления&rdquo; нашего приложения на сервере)</p>

<p><strong>config/deploy.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy/assets&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span> <span class="s1">&#39;YOUR_GIT_OR_SVN_REPOSITORY_URL&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;YOUR_SERVER_IP_OR_HOSTNAME&#39;</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:forward_agent</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:shell</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;bash -l&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;deployer&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:group</span><span class="p">,</span> <span class="s1">&#39;staff&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:project_name</span><span class="p">,</span> <span class="s1">&#39;simple_deployment&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Restart of Unicorn&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;kill -s USR2 `cat /home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">/shared/pids/unicorn.pid`&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Start unicorn&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> ; bundle exec unicorn_rails -c config/unicorn.rb -D -E </span><span class="si">#{</span> <span class="n">rails_env</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Stop unicorn&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:stop</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;kill -s QUIT `cat /home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">/shared/pids/unicorn.pid`&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span> <span class="s1">&#39;deploy:finalize_update&#39;</span><span class="p">,</span> <span class="s1">&#39;deploy:symlink_db&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Symlinks the database.yml&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:symlink_db</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">/shared/config/database.yml </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/database.yml&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Проекты у нас на сервере будут жить в домашнией папке + projects, т.е. для нашего пользователя deployer это будет /home/deployer/projects.</p>

<p>В каждой папке приложения находятся еще три папки (releases &ndash; где хранятся все релизы нашего приложения, current &ndash; симлинк на текущий релиз из папки releases и shared, где хранится общая шняга для все релизов: пиды, идентификаторы сессий, логи и прочее.)</p>

<p>Также необходимо добавить ssh ключ сервера на github или bitbucket</p>

<p>содержимое ключа <code>cat ~/.ssh/id_rsa.pub</code>, если такого файла нет, то нужно его сгенерировать <code>ssh-keygen -t rsa</code></p>

<p>и сделать с сервера <code>ssh git@bitbucket.org</code>, чтобы подтвердить соединение.</p>

<h5>config/unicorn.rb &ndash; минимальный конфиг для нашего HTTP сервера.</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker_processes</span> <span class="mi">2</span>
</span><span class='line'><span class="n">user</span> <span class="s1">&#39;deployer&#39;</span><span class="p">,</span> <span class="s1">&#39;staff&#39;</span>
</span><span class='line'><span class="n">preload_app</span> <span class="kp">true</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span><span class='line'>
</span><span class='line'><span class="n">project_name</span> <span class="o">=</span> <span class="s1">&#39;simple_deployment&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">working_directory</span> <span class="s2">&quot;/home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">/current&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">listen</span> <span class="s2">&quot;/tmp/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">.socket&quot;</span><span class="p">,</span> <span class="ss">:backlog</span> <span class="o">=&gt;</span> <span class="mi">64</span>
</span><span class='line'><span class="n">pid</span> <span class="s2">&quot;/home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">/shared/pids/unicorn.pid&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">stderr_path</span> <span class="s2">&quot;/home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">/shared/log/unicorn.stderr.log&quot;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s2">&quot;/home/deployer/projects/</span><span class="si">#{</span> <span class="n">project_name</span> <span class="si">}</span><span class="s2">/shared/log/unicorn.stdout.log&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Если вы указали все верно в config/deploy.rb, то можно запустить <strong>cap deploy:setup</strong> для создания capistrano необходимых для разворачивания приложения папок на стороне сервера.</p>

<h3>Nginx</h3>

<p>Устанвливаем nginx командой <code>sudo apt-get install nginx</code> и переходим к его настройке. Для начала отредактируем файл <strong>/etc/nginx/nginx.conf</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="n">deployer</span> <span class="n">staff</span><span class="p">;</span>
</span><span class='line'><span class="n">worker_processes</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pid</span> <span class="sr">/var/</span><span class="n">run</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="n">events</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">worker_connections</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>  <span class="n">multi_accept</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">http</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">sendfile</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp_nopush</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp_nodelay</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">mime</span><span class="o">.</span><span class="n">types</span><span class="p">;</span>
</span><span class='line'>  <span class="n">default_type</span> <span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="p">;</span>
</span><span class='line'>  <span class="n">access_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>  <span class="n">error_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_disable</span> <span class="s2">&quot;msie6&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_proxied</span> <span class="n">any</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_min_length</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_types</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span> <span class="n">text</span><span class="o">/</span><span class="n">css</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span> <span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">javascript</span> <span class="n">text</span><span class="o">/</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">xml</span><span class="o">+</span><span class="n">rss</span> <span class="n">text</span><span class="o">/</span><span class="n">javascript</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/*.</span><span class="n">conf</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/*</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Последняя строчка нужна, чтобы nginx загружал свои конфиги и из папка <strong>/etc/nginx/sites-enabled/</strong> (это нужно для того, чтобы не хранить все конфиги для проектов в одном файле).</p>

<p>А теперь nginx конфиг для нашего приложения.Будем считать, что наше приложение называется simple_deployment, а домен у него simple-deployment.com (чтобы вам удобнее было заменять на свои данные).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">upstream</span> <span class="n">simple_deployment</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">server</span> <span class="ss">unix</span><span class="p">:</span><span class="sr">/tmp/sim</span><span class="n">ple_deployment</span><span class="o">.</span><span class="n">socket</span> <span class="n">fail_timeout</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="n">simple</span><span class="o">-</span><span class="n">deployment</span><span class="o">.</span><span class="n">com</span><span class="p">;</span>
</span><span class='line'>  <span class="n">root</span> <span class="sr">/home/</span><span class="n">deployer</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">simple_deployment</span><span class="o">/</span><span class="n">current</span><span class="o">/</span><span class="kp">public</span><span class="p">;</span>
</span><span class='line'>  <span class="n">access_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">simple_deployment_access</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rewrite_log</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//sim</span><span class="n">ple_deployment</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$host</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">client_max_body_size</span> <span class="mi">10</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="n">client_body_buffer_size</span> <span class="mi">128</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">proxy_connect_timeout</span> <span class="mi">90</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_send_timeout</span> <span class="mi">90</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_read_timeout</span> <span class="mi">90</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_buffer_size</span> <span class="mi">4</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_buffers</span> <span class="mi">4</span> <span class="mi">32</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_busy_buffers_size</span> <span class="mi">64</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_temp_file_write_size</span> <span class="mi">64</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">~</span> <span class="o">^/</span><span class="p">(</span><span class="n">assets</span><span class="o">|</span><span class="n">images</span><span class="o">|</span><span class="n">javascripts</span><span class="o">|</span><span class="n">stylesheets</span><span class="o">|</span><span class="nb">system</span><span class="p">)</span><span class="o">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">root</span> <span class="sr">/home/</span><span class="n">deployer</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">simple_deployment</span><span class="o">/</span><span class="n">current</span><span class="o">/</span><span class="kp">public</span><span class="p">;</span>
</span><span class='line'>    <span class="n">expires</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>и удалить файлы <strong>/etc/nginx/sites-available/default</strong> и <strong>/etc/nginx/sites-enabled/default</strong></p>

<p>Теперь можно смело пробовать запускать <code>cap deploy:migrations</code>  в консоли локального приложения. Если все было выполнено по данной заметке, то вы должны получить развернутое приложения на сервере в папке <strong>/home/deployer/projects/simple_deployment</strong>, если вы конечно строго следовали инструкциям.</p>

<p>Запустим последную команду на сервере, запустим nginx (<code>sudo service nginx start</code>).</p>

<p>Теперь, после деплоя можно запускать команду cap start или cap stop для запуска сервера или его остановки. Надеюсь, следуя этому мануалу, у вас получилось развернуть свое приложение на сервере. Если нет, то милости прошу в комментарии, чем смогу, постараюсь помочь.</p>

<p>Ссылки на дополнительные материлы:</p>

<ul>
<li><a href="http://gembundler.com/deploying.html">деплой вместе с bundler</a></li>
<li><a href="http://unicorn.bogomips.org/Unicorn/Configurator.html">конфигурация unicorn&#8217;а</a></li>
</ul>


<p>Enjoy, my little colleagues :)</p>

<p>UPDATE: 06.03.2013
Немного защитим наш сервер, в первую очередь давайте запретим логин рута по ssh, у нас на это есть пользователь deployer, который может выполлнять команды от рута с помощью sudo. Для этого в файле <strong>/etc/ssh/sshd_config</strong> необходимо изменить
<strong>PermitRootLogin</strong> на <strong>no</strong> и <strong>PasswordAuthentication</strong> на <strong>no</strong>, последняя настройка запретит авторизацию для SSH по паролю (только по ключу).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Перенос sqlite3 базы данных в Postgres (Heroku)]]></title>
    <link href="http://zudochkin.ru/2013/01/slite3-to-posgres-migration"/>
    <updated>2013-01-25T12:12:16+04:00</updated>
    <id>http://zudochkin.ru/2013/01/slite3-to-posgres-migration</id>
    <content type="html"><![CDATA[<p>Иногда бывает крайне необходимо конвертировать имеющуюся базу данных в одном формате в формат другой. Сегодня я расскажу вам как это быстро и безболезненно (почти) сделать.<!-- more --></p>

<p>Для начала нам понадобится замечательный <a href="https://github.com/ricardochimal/taps">gem taps</a> и запущенный с его помощью локальный сервер с бекендом из Sinatra.</p>

<p>Т.к. часто создавая новый проект, не хочется особо заморачиваться и создавать для этого отдельную базу данных в Postgres, я обычно использую базу данных по умолчанинию, в рельсах это, как вам известно, sqlite. Но бывает иногда необходимо скопировать данные с локальной базы данных в удаленную, к примеру, если вы хостите проект на heroku, где по умолчанию используется postgres.</p>

<p>Итак, поехали, для начала создаем сервер:</p>

<p><code>taps server sqlite://db/development.sqlite3 user pass</code>, где user &ndash; это имя пользователя для доступа к нашему серверу (серверу taps), pass соответственно пароль.</p>

<p>Дальше нам нужно скопировать нашу sqlite базу данных в postgres, для этого достаточно запустить одну команду:</p>

<p><code>taps pull postgres://zudochkin@localhost/project_development http://user:pass@localhost:5000</code>, где postgres &ndash; это адаптер базы данных, вы можете смело использовать mysql, zudochkin &ndash; имя пользователя для postgres, project_development &ndash; имя базы данных, куда я собираюсь импортировать данные, http://user:pass@localhost:5000 &ndash; коннектимся к нашему серверу, где в качестве имени пользователя указали user, в качестве пароля pass, а крутится все это дело по умолчанию на 5000 порте.</p>

<p>Теперь, если зайти и посмотреть через pgAdmin в нашу postgres базу данных, то мы увидим данные, скопированные из sqlite3.</p>

<p>Дальше необходимо сделать postgres дамп, для того, чтобы импортировать его в heroku базу данных.</p>

<p><code>pg_dump -Fc --no-acl --no-owner -h localhost -U zudochkin project_development &gt; project_development.dump</code></p>

<p>Загружаем дамп куда-нибудь в интернет: подойдет любой фтп или что-нибудь наподобие <a href="http://getcloudapp.com">CloudApp</a>, я использую последнее, потому что есть нативный клиент под Mac и он удобен в работе.</p>

<p>Дальше получаем URL для доступа к postgres базе данных heroku, для этого в папке с приложением выполнеяем (или из любой папке, но дописав к команде <code>--app app_name</code>) <code>heroku config | grep DATABASE_URL</code> и увидим длинный адрес, это и есть ссылка для доступа к БД. Если вы, как я используете cloudApp, то знайте, что, когда вы копируете ссылку на файл, это, не прямая ссылка и поэтому загрузить на heroku дамп у вас не получится, для того, чтобы увидеть реально прямую ссылку необходимо набрать следующее <code>curl -I http://cl.ly/2h1k1X3Z2j4f/project_development.dump | grep Location</code> и вы увидите прямую ссылку после слова <strong>&ldquo;Location: &rdquo;</strong>. Длинный и запутанный адрес это ссылка, которую вам дал cloudApp для доступа к файлу.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2013-01-slite3-to-posgres-migration/Screen-Shot-2013-01-25-at-12.05.28-PM1-300x146.png"></p>

<p>После этих манипуляций давайте запустим импорт базы данных из папки с проектом <code>heroku pgbackups:restore DATABASE 'http://f.cl.ly/items/4G2u393d432U3V0u2X1d/project_development.dump'</code> если все прошло нормально, то мы увидим</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Retrieving... done
</span><span class='line'>Restoring... done</span></code></pre></td></tr></table></div></figure>


<p>если же что-то пошло не так и вы увидели сообщение об ошибке, напишите <code>heroku logs --ps pgbackups</code> и вы увидите что именно пошло не так.</p>

<p>Надеюсь, данная заметка вам поможет перенести локальные данные на heroku или просто сделать из sqlite3 базы данных postgres или mysql.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Оповещение после выполнения "тяжелой" фоновой задачи с помощью faye и PrivatePub]]></title>
    <link href="http://zudochkin.ru/2013/01/resque-with-private-pub-and-rails"/>
    <updated>2013-01-21T22:45:24+04:00</updated>
    <id>http://zudochkin.ru/2013/01/resque-with-private-pub-and-rails</id>
    <content type="html"><![CDATA[<p>Допустим нам необоходимо после выполнения большой задачи в фоновом режиме сообщить об этом пользователю и совершить что-нибудь, например, показать ему какой-нибудь popup. <!-- more -->
Для этого по-старинке, можно с интервалом, скажем в 1 секунду опрашивать сервер и смотреть не завершилась ли наша задача, но в пору HTML5  делать это, по крайней мере, не престижно. Будем использовать для этих целей инструмент по обмену сообщениями между сервером и клиентом <strong>Faye</strong>.</p>

<h3>Инструменты</h3>

<p>Нам понадобится Rails приложение, к которому мы и будем привязывать всю эту функциональность. Также будем использовать <strong>Resque</strong> для выполнений фоновых задач &ndash; инструмент, зарекомендовавший себя, как надежный и стабильный помощник, спасающий всегда, когда нужно выполнить тяжелые задачи в фоне. Вместе с <strong>faye</strong> воспользуемся оберткой для него от Ryan Bates <strong>Private Pub</strong>, который мне очень облегчил жизнь, надеюсь, и облегчит вам.</p>

<h3>Реализация</h3>

<p>Для начала установим redis и обновим наш Gemfile, дополнив его необходимыми гемами resque, faye, private_pub, thin.</p>

<p>Я буду рассказать все на примере Mac OS, установка подобного инструментарий, скажем, на Ubuntu, не должна вызвать вопросов, потому что инструменты очень распространенные.</p>

<p>Устанавливал redis я с помощью всем известного пакетного менеджера Homebrew, напечатав в терминале всего одну команду <code>brew install redis</code></p>

<p>Допустим у нас имеется какой-нибудь тяжелый объект с несколькими картинками, которые лежат в Amazon S3 и, чтобы создать копию этого объекта нам понадобится скачать все эти картинки, чтобы вновь их туда загрузить,  привязав в новому объекту. Не спрашивайте почему так сложно, так работает CarrierWave или я просто не нашел лучшего решения.</p>

<p>Если у нас раньше был метод в контролле, к примеру, clone, которй вызывал метод из модели, делающий всю грязную работу, то сейчас нам нужно лишь добавить новую задачу для resque, выглядеть это будет примерно так</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">clone</span>
</span><span class='line'>  <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">CloneProfileWorker</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Теперь тяжелая задача будет добавляться в очередь всякий раз, когда мы пройдем по ссылке <strong>/profiles/#{ id }/clone</strong>.</p>

<p>Давайте поставим и настроим PrivatePub, который будет со стороны клиента подписываться на определенные события, и со стороны сервера, после наступления определенного события (в нашем примере это, когда resque job отработает) делать нужные нам вещи.</p>

<p>Для этого в консоли нужно запустить <code>rails g private_pub:install</code></p>

<p>и добавить в файл app/assets/javascripts/application.js[.cofeee] строчку
<code>#= require private_pub</code>, если вы используете cofeeScript или же <code>//= require private_pub</code>, если js</p>

<p>и дальше во вьюхе <strong>/profile/clone.html.haml</strong> (я использую haml в данном проекте)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">subscribe_to</span> <span class="s2">&quot;/profile_cloning_</span><span class="si">#{</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">:javascript</span>
</span><span class='line'>  <span class="no">PrivatePub</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s1">&#39;/profile_cloning_#{ params[:id] }&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">channel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">location</span><span class="o">.</span><span class="n">href</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Первая строчка это метод из гема, который инициализует объект необходимыми параметрами из файла /config/private_pub.yml, а после мы &ldquo;подписываемся на событие &lsquo;/profile_cloning_#{ params[:id] }&rsquo;, где в params[:id] содержится текущий id профиля. При наступлении данного события, мы перенаправляем пользователя на страницу &lsquo;/profile/#{ new_id }/edit&rdquo;, полный урл мы получим после того, как resque job отработает.</p>

<p><strong>app/workers/clone_profile_worker.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;resque&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CloneProfileWorker</span>
</span><span class='line'>  <span class="vi">@queue</span> <span class="o">=</span> <span class="ss">:default</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">profile_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="no">Profile</span><span class="o">.</span><span class="n">find</span> <span class="n">profile_id</span>
</span><span class='line'>    <span class="n">new_profile</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">clone_self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">new_profile</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Profile</span>
</span><span class='line'>      <span class="no">PrivatePub</span><span class="o">.</span><span class="n">publish_to</span> <span class="s2">&quot;/profile_cloning_</span><span class="si">#{</span> <span class="n">profile_id</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;/profiles/</span><span class="si">#{</span> <span class="n">new_profile</span><span class="o">.</span><span class="n">id</span> <span class="si">}</span><span class="s2">/edit&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В данном воркере нет ничего магического: сначала мы клонируем наш профиль и если все прошло успешно, то оповещаем нашего клиента и передаем туда url, на который он перенаправится.</p>

<p>Проверяем работоспособность</p>

<p>Запускаем в разных окнах терминала:</p>

<ul>
<li><code>rails s</code></li>
<li><code>redis-server /usr/local/etc/redis.conf</code> (у меня MacOs, на других ОС должно быть нечто подобное)</li>
<li><code>VERBOSE=1 rake resque:work QUEUE=*</code> (запускаем все очереди, устанвливаем verbose=1 для того, чтобы видеть что происходит внутри resque)</li>
<li><code>rackup private_pub.ru -s thin -E production</code> (сервер для PrivatePub и Faye)</li>
</ul>


<p>Проходим по ссылке наподобие <strong>/profiles/73/clone</strong> и смотрим в терминале как отрабатывает наш resque job и мы перенаправляемся на редактирование уже склонированного профиля, если все отработало без ошибок. Если же возникли ошибки, то они отобразятся в терминале, если произойдет что-то невообразимое и непредвиденное, пишите в комментариях, я попробую помочь вам.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Новый 2013 год]]></title>
    <link href="http://zudochkin.ru/2012/12/new-2013-year"/>
    <updated>2012-12-31T12:51:45+04:00</updated>
    <id>http://zudochkin.ru/2012/12/new-2013-year</id>
    <content type="html"><![CDATA[<p>Здравствуйте, уважаемые коллеги и просто случайно зашедшие на огонек. Сегодняшняя заметка будет посвящена итогам уходящего 2012 года, а год для меня выдался, честно сказать, очень плодотворным и очень насыщенным.</p>

<!-- more -->


<h3>(Около)Кодерское</h3>

<ul>
<li>В этом году я окончательно отказался от PHP в пользу Ruby</li>
<li>Отказался также от поддержки фриланс проектов на PHP</li>
<li>Сейчас исключительно Ruby and Ruby on Rails</li>
<li>Отказался от громоздких и неповоротливых IDE в пользу VIM (пишу код уже 9 месяцев исключительно в нем)</li>
<li>Придерживаюсь TDD, стараюсь писать спеки и для своих личных проектов (пока получается)</li>
<li>Стал читать больше блогов через RSS (количество подписок сильно возросло)</li>
<li>Начал усиленно использовать git, теперь не страшат такие слова, как revert, stash и rebase</li>
<li>Выработал свой git workflow</li>
<li>Использую Sublime 2 для удобного чтение исходников Ruby и Rails (занимательно чтиво, скажу я вам)</li>
<li>Не страшит настройка сервера для собственных нужд (nginx, unicorn, rbenv, postgresql, capistrano)</li>
<li>Уже второй месяц пробую linode, планирую перенести все свои проекты на него</li>
<li>Познакомился (очень поверхностно) с написанием C extension&#8217;ов на Ruby</li>
<li>Сделал пару коммитов в гемы, что меня очень радует</li>
</ul>


<h3>Работа</h3>

<ul>
<li>Закончил работать web-мастером-программистом-верстальщиком над множеством проектов на PHP (веб студия)</li>
<li>Устроился работать в замечательную компанию Tougingo: где очень многому научился, туда меня взяли почти без опыта работы по Ruby. Спасибо хотелось бы сказать Ткачуку Александру за бесценные знания и бесконечные ответы на мои вопросы.</li>
<li>Сейчас работаю в не менее замечательной компании KupiKupon в дружном и большом коллективе, где по вечерам иногда играем в настольный теннис, иногда играем в футбол, и где каждый не откажет в помощи.</li>
</ul>


<h3>Спорт</h3>

<ul>
<li>Купил в конце года абонемент на год, проходить правда довелось только месяц и немного подзабить в предновогодние праздники, но в планах усиленно заниматься спортом в следующем году</li>
<li>Мысль о здоровом теле каждый день меня все сильнее и сильнее радует</li>
</ul>


<h3>Планы на 2013 год</h3>

<ul>
<li>В первую очередь хочу переписать свой блог на Ruby on Rails, отказавшись от WP</li>
<li>Перейти на новую для меня систему Mac OS, спасибо моей любимой жене за подаренный Macbook Air</li>
<li>Дооформить черновики и выложить еще несколько заметок в этот блог</li>
<li>Попробовать снять свой первый в жизни скринкаст (с тематикой я еще не определился)</li>
<li>Перевести все свои старые действующие проекты на Ruby (часть уже перенесена)</li>
</ul>


<p>Всех вас, ребят, с Новым 2013 Годом. Желаю исполнения половины желаний и всяческих побед :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Скачиваем Torrent файлы с помощью ruby и transmission]]></title>
    <link href="http://zudochkin.ru/2012/09/download-torrent-files-with-transmission-daemon"/>
    <updated>2012-09-10T23:51:27+04:00</updated>
    <id>http://zudochkin.ru/2012/09/download-torrent-files-with-transmission-daemon</id>
    <content type="html"><![CDATA[<p>Сегодня я расскажу вам как я решил несложную, но очень акутальную для меня задачу, а именно скачивание файлов с торрентов. Я приследовал в первую очередь цель скачивать файлы с помощью айпеда, в котором очень сложно с торрент клиентами. Задача свелась к тому, что с айпеда отправляю задание на скачку с торрентов, жду некоторое время и забирая скаченный файл. Сначала хотел реализовать вариант сложнее, а именно, чтобы скаченный файл отправлялся в дропбокс (ничего сложного тут нет, есть удобный и понятный гем), но понял что для меня задача решена и вместо того, чтобы делать какие-то &ldquo;плюшки&rdquo;, займусь чем-нибудь другим.</p>

<!-- more -->


<p><img class="image" src="http://zudochkin.ru/images/posts/2012-09-download-torrent-files-with-transmission-daemon/transmission-daemon-ruby-300x172.png"></p>

<h3>Инструментарий</h3>

<p>Нам понадобится дешевенький vps сервер, я взял у reg.ru за 128 рублей в месяц с 128 мегабайтами оперативной памяти и 2 гигабайтами жестким и хорошим интернет каналом на XEN. Для данной задачи за глаза хватит такого слабенького сервера.</p>

<p>Демон <em>transmission-daemon</em> для быстрого и удобного скачивания файлов через торрент. Самое сложное тут будет правильно настроить конфиг (но и это просто).</p>

<p>Rails бекенд (unicorn, nginx) для сообщения transmission, что пока заканчивать прохлаждаться и начинать скачивать файлы.</p>

<h3>Поэтапная реализация</h3>

<p>В данной заметке я не буду рассказывать вам, как устанавливать rvm (в данном проекте я применял его), настраивать nginx + unicorn + capistrano, мануалов полно в инете, я лишь заострю внимание на ключевых моментах. Допустим приложение, чтобы не путаться в путях у вас также как у меня находится в папке <em>/home/deployer/apps/my_site_current</em>.</p>

<p>Давайте разберемся с конфигом transmission-daemon&#8217;а, который будет лежать в <em>~/.config/transmission-daemon/settings.json</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;dht-enabled&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;download-dir&quot;</span><span class="o">:</span> <span class="s2">&quot;/home/deployer/apps/my_site/current/public/attachment/complete-downloads&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;download-queue-enabled&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;download-queue-size&quot;</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;encryption&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;idle-seeding-limit&quot;</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;idle-seeding-limit-enabled&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;incomplete-dir&quot;</span><span class="o">:</span> <span class="s2">&quot;/home/deployer/apps/my_site/current/public/attachment/incomplete-downloads&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;watch-dir&quot;</span><span class="o">:</span> <span class="s2">&quot;/home/deployer/apps/my_site/current/public/attachment/incomplete-dir&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;watch-dir-enabled&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;incomplete-dir-enabled&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;lpd-enabled&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;message-level&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;peer-congestion-algorithm&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;script-torrent-done-enabled&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;script-torrent-done-filename&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;start-added-torrents&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;trash-original-torrent-files&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;umask&quot;</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;upload-slots-per-torrent&quot;</span><span class="o">:</span> <span class="mi">14</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;utp-enabled&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Большинство опций использунется по умолчанию, но есть некоторые которые стоит пояснить.</p>

<ul>
<li><em>&ldquo;download-dir&rdquo;</em> &ndash; указывает в какую папку сохранять скаченные файлы</li>
<li><em>&ldquo;incomplete-dir&rdquo;</em> &ndash; куда будет качать</li>
<li><em>&ldquo;incomplete-dir-enabled&rdquo;</em> чтобы отделить котлеты от мух (скачиваемое и скаченное будут лежать отдельно, дабы не путаться)</li>
<li><em>&ldquo;watch-dir&rdquo;</em> &ndash; за какой папкой будем следить, т.е. если в этой папке появляются торрент файлы, то автоматически начинаем их скачивать</li>
<li><em>&ldquo;watch-dir-enabled&rdquo;</em> &ndash; включаем опцию &ldquo;слежения&rdquo;</li>
</ul>


<p>Для эксперимента будем скачивать торрент файл с tfile.ru, чтобы без регистрации. Чтобы скачать файл, необходимо поставить куку, которая ставится javascript&#8217;ом, но тут нет ничего сложного.</p>

<p>Скачивать будем wget&#8217;ом, чтобы проще, а чтобы еще проще взаимодействовать с консольными утилитами будет использовать гем Cocaine от создателей Paperclip&#8217;а и FacoryGirl&#8217;ы.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Attachment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:url</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:file</span><span class="p">,</span> <span class="ss">:url</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:download_torrent_file</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">download_torrent_file</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cookie</span> <span class="o">=</span> <span class="n">response</span><span class="o">[</span><span class="sr">/tmbx=[^&quot;]*/</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">torrent_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">[</span><span class="sr">/http:\/\/[^&quot;]*/</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output_path</span> <span class="o">=</span> <span class="s1">&#39;/home/deployer/apps/my_site/current/public/attachment/incomplete-dir/&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output_file</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span> <span class="n">output_path</span> <span class="si">}#{</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">to_s</span> <span class="si">}</span><span class="s2">-</span><span class="si">#{</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="si">}</span><span class="s2">.torrent&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># wget &#39;http://tfile.ru/forum/download.php?id=549501&amp;attempt;=1#r&#39; --no-cookies --header &quot;Cookie: tmbx=6df9fc90ad02d5bdf2ca7449d0cc44</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="ss">Cocaine</span><span class="p">:</span><span class="ss">:CommandLine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;wget&#39;</span><span class="p">,</span> <span class="s2">&quot;:torrent_url --no-cookies --header &#39;Cookie: </span><span class="si">#{</span> <span class="n">cookie</span> <span class="si">}</span><span class="s2">&#39; -O :output_file&quot;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="ss">:torrent_url</span> <span class="o">=&gt;</span> <span class="n">torrent_url</span><span class="p">,</span>
</span><span class='line'>                                    <span class="ss">:output_file</span> <span class="o">=&gt;</span> <span class="n">output_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">line</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Так мы будем скачивать наши торрент файлы. Первый запуск transmission-daemon&#8217;а попробуем не в режиме демона, чтобы не ждать до ишачьей пасхи, а видеть все ошибки воочию. Для этого запустим transmission-daemon с ключом <strong>-f</strong> и все ошибки посыпятся в stdout и мы легко их сможем исправить, если все пойдет по плану, то наш первый файл будет скачен. Если все прошло тип-топ, то можем запускать transmission-daemon без параметров и озадачивать его новыми закачками.</p>

<p>Для того, чтобы отобразить результат и использовал следующее костальное решение в контроллере <strong>Attachments#index</strong>, я написал следующее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;public/attachment/complete-downloads/*&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>во вьюхе уже выводил список файлов</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @files.each </span><span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">* &lt;%= link_to f, f.sub(&#39;public&#39;, &#39;&#39;) %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Так как мне нужно было лишь скачивать pdf журналы, которые распространяются одним pdf файлом, то у меня не было необходимости выводить папки в папках, достаточно было отобразить файлы в одной папке.</p>

<h3>Заключение</h3>

<p>Данное решение служит мне верой и правдой уже где-то с месяц и не вызывало никаких нареканий, процессы не отваливаются, журнальчики скачиваются :) Было бы неплохо, наверное, сделать так, что при скачивании торрент файла, мы получаем список файлов, которые в нем содержатся и каким-нибудь демоном проверяем все ли файлы скачались, если да, то оповещаем по имейлу пользователя. Но данная &ldquo;плюшка&rdquo; выходит за рамки данной заметки. Надеюсь, вам было интересно, до новых встреч :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Один вопрос и несколько ответов]]></title>
    <link href="http://zudochkin.ru/2012/08/rails-has-many-relations-coffeescript"/>
    <updated>2012-08-18T20:52:03+04:00</updated>
    <id>http://zudochkin.ru/2012/08/rails-has-many-relations-coffeescript</id>
    <content type="html"><![CDATA[<p>Давно что-то я не писал, а тут выдался свободный денек, чтобы рассказать еще об одной плюшке, которую я узнал. Все приведенное ниже не претендует на ортодоксальную правильность, это лишь мое мнение и мое решение.</p>

<p>Имеется, к примеру, у нас вопросы и ответы и мы, вместо того, чтобы создавать сначала вопрос и потом привязывать к нему по одному ответы, будем делать это все на одной странице.</p>

<!-- more -->


<p><img class="image" src="http://zudochkin.ru/images/posts/2012-08-rails-has-many-relations-coffeescript/rails-nested-relations-300x243.png"></p>

<h3>Решение</h3>

<p>В решении нам помогут gem <em>simple_form</em>, который в разы облегчает работу с формами и <em>coffescript</em>, который хоть и транслируется в javascript, но по синтаксису очень похож на руби со своим &ldquo;сахаром&rdquo;.</p>

<h4>Модели</h4>

<p>Как ясно из название, у нас будут две модели: Question и Answer, в них нет ничего сложного</p>

<p>Вопрос</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Question</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:answers_attributes</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:answers</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:answers</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ответ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Answer</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:question_id</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:question</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Единственное, что может показаться странным с первого взгляда, так это строка accepts_nested_attributes. Которая говорит, что модель Question может принимать атрибуты и для ответа, т.е. один post запрос может нам и вопрос создать и ответы к нему.</p>

<p>Я для экономии времени использовал twitter-bootstrap-rails gem и scaffold, поэтому все получилось почти готовое. Лишь небольшие правки я внес в форму <em>app/views/questions/</em>form.html.erb_</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%= f.input :name, :label =&gt; &#39;Текст вопроса&#39; %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;answers&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= f.simple_fields_for :answers do |answers_form| %&gt;
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;answer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>%= answers_form.input :name, :label =&gt; &#39;Текст ответа&#39; %&gt;
</span><span class='line'>
</span><span class='line'>      <span class="err">&lt;</span>%= link_to &#39;#&#39;, :class =&gt; &#39;remove_answer&#39; do %&gt;
</span><span class='line'>        <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-minus-sign&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>%= link_to &#39;#&#39;, :id =&gt; &#39;add_answer&#39; do %&gt;
</span><span class='line'>  <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-plus-sign&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Я обернул ответы на вопрос классом .answers, чтобы они визуально отличались, добавил вложенную форму для вопросов с помощью simple_form и две кнопки: &ldquo;+&rdquo; &ndash; для добавления ответа и &ldquo;&ndash;&rdquo; &ndash; для его удаления</p>

<p>Сейчас задача сводится к тому, чтобы динамически добавлять/удалять ответы на странице без ее перезагрузки, взглянем на генерируемый html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;string required&quot;</span> <span class="na">id=</span><span class="s">&quot;question_answers_attributes_0_name&quot;</span> <span class="na">name=</span><span class="s">&quot;question[answers_attributes][0][name]&quot;</span> <span class="na">size=</span><span class="s">&quot;50&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>При добавлении нового элемента возрастает цифра в айдишнике и в имени текстового поля. Для того, чтобы создать новый ответы мы будем действовать так: склонируем последний ответ на странице с помощью $.clone(), поменяем все элементы name и id, заменив у них цифру в середине. Заменять будем на new Date().getTime(), который генирует случайное число, хоть и большое, но оно нам подходит. Также нам нужно будет не забыть о лейблах, а то получится, что мы кликаем на лейбл, а в фокус попадает совсем не соответствующий элемент. Итак, поехали.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="c1"># обрабатываем клик по кнопке добавления</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#add_answer&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">$last = </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;.answer:last&#39;</span><span class="p">)</span> <span class="c1"># последний ответ на странице</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$cloned = </span><span class="nx">$last</span><span class="p">.</span><span class="nx">clone</span><span class="p">()</span> <span class="c1"># клонируем его</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># получаем рандомное число</span>
</span><span class='line'>    <span class="nv">randValue = </span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># пробегаемся по всем элементам, у которых есть атрибут name или for</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&#39;[name], [for]&#39;</span><span class="p">,</span> <span class="nx">$cloned</span><span class="p">).</span><span class="nx">each</span> <span class="nf">(index, item) -&gt;</span>
</span><span class='line'>      <span class="nv">$item = </span><span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># если это текстовое поле, заменяем id и name</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">$item</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeName</span> <span class="o">is</span> <span class="s">&#39;INPUT&#39;</span>
</span><span class='line'>        <span class="nx">$item</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="nx">$item</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">,</span> <span class="nx">randValue</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">$item</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="nx">$item</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">,</span> <span class="nx">randValue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># если это лейбл, то заменяем атрибут for</span>
</span><span class='line'>      <span class="nx">$item</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;for&#39;</span><span class="p">,</span> <span class="nx">$item</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;for&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">,</span> <span class="nx">randValue</span><span class="p">)</span>  <span class="k">if</span> <span class="nx">$item</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeName</span> <span class="o">is</span> <span class="s">&#39;LABEL&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># скрываем добавляемый ответ, чтобы красиво появиться</span>
</span><span class='line'>    <span class="nx">$cloned</span><span class="p">.</span><span class="nx">hide</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$cloned</span><span class="p">.</span><span class="nx">appendTo</span> <span class="nx">$last</span><span class="p">.</span><span class="nx">parent</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$cloned</span><span class="p">.</span><span class="nx">slideDown</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Осталось добавить обработчик события удаления ответа</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># при клике на удаление ответа, удаляем его</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">).</span><span class="nx">delegate</span> <span class="s">&#39;.remove_answer&#39;</span><span class="p">,</span> <span class="s">&#39;click&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;.answer&#39;</span><span class="p">)).</span><span class="nx">slideUp</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">remove</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Метод $.closest находит ближайший элемент с классом .answer, поднимаясь вверх по дереву DOM. Находим его, скрываем, а после проигрыша анимации удаляем.</p>

<h3>Что можно сделать лучше</h3>

<ul>
<li>Добавить валидацию на количество ответов в модели, к примеру, <code>validates_length_of :answers, :minimum =&gt; 1</code></li>
<li>Добавить проверку, чтобы не удалить последний ответ, после удаления которого мы не сможем добавить новый &ndash; клонировать некого :)</li>
<li>Не использовать скаффолд, который генерирует много ненужного мусора, по крайней мере, для данной задачи</li>
<li>Да и вообще предела-то совершенству нет :)</li>
</ul>


<p>Надеюсь, данная неидеальная реализация кому-нибудь в жизни пригодится, вопросы, советы? &ndash; велком в комментарии.</p>

<p>Чуть не забыл ссылку на <a href="https://github.com/vredniy/nested-relations">репозиторий на гитхабе</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Полиморфная связь и TokenInput jQuery]]></title>
    <link href="http://zudochkin.ru/2012/04/polymorphic-relations-and-token-input-jquery"/>
    <updated>2012-04-18T23:26:02+04:00</updated>
    <id>http://zudochkin.ru/2012/04/polymorphic-relations-and-token-input-jquery</id>
    <content type="html"><![CDATA[<p>Представьте ситуацию, что у вас имеется некая модель, к которой вы хотите добавлять по средствам связей другие модели. Хорошо, когда данную связь можно описать обычным <strong>has_many</strong>, другое дело, когда нужно привязать разнородные модели, к примеру, у вас имеется модель вопросов, к которой нужно привязать город или страну <!-- more -->(не очень наглядный пример, вряд ли он вам в жизни встретится, но я поделюсь своим опытом).</p>

<p>Как вы, наверное, догадались, основным инструментом будет выступать ruby an rails. Из гемов будем использовать <strong>simple_form</strong> для удобного создания форм, <strong>inherited_resources</strong>, чтобы писать намного меньше кода в контроллерах (сейчас не представляю без этого гема жизни).</p>

<p>Также нам понадобится плагин для jQuery <a href="http://loopj.com/jquery-tokeninput/">tokenInput</a>, который будет отображать выпадающий список с autoComplete&#8217;ом, из которого мы сможем выбрать одно значение из стран или городов (список будет один).</p>

<h3>Реализация</h3>

<p>Начнем с контроллера <strong>QuestionableController</strong> (не очень, конечно, удачное название), который будет отдавать солянку из городов и стран с возможностю поиска.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">QuestionableController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">countries</span> <span class="o">=</span> <span class="no">Country</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;name LIKE(?)&#39;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span> <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span>
</span><span class='line'>    <span class="n">cities</span> <span class="o">=</span> <span class="no">City</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="o">[</span><span class="s1">&#39;name LIKE(?)&#39;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span> <span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span> <span class="si">}</span><span class="s2">%&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@questionable</span> <span class="o">=</span> <span class="n">countries</span> <span class="o">+</span> <span class="n">cities</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="si">}</span><span class="s2"></span>
</span><span class='line'><span class="s2">    end</span>
</span><span class='line'><span class="s2">  end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Лучше вынести всю логику в модель, но данный пример создан исключительно для демонстрации. Что мы делаем в этом контроллере? Ищем страны и города, удовлетворяющих параметру <strong>q</strong> и заполняем инстанс переменную <strong>@questionable</strong></p>

<p>Также давайте заполним нашу вьюшку <em>index.json.erb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">sanitize</span> <span class="vi">@questionable</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="nb">methods</span><span class="p">:</span> <span class="o">[</span><span class="ss">:id_with_class_name</span><span class="o">]</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>в которой мы рендерим наш json, т.к. нам не нужны все поля модели мы используем только необходимые <code>(only: [:id, :name])</code>, ключ methods: указывает на то, что мы помимо физических свойст, будем использовать метод модели <em>id_with_class_name</em>.</p>

<p>Пока не забыл, давайте пропишем пару строк в наш <em>config/routes.rb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:questions</span> <span class="c1"># для того, чтобы создавать/показывать/удалять вопросы</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:questionable</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="ss">:index</span> <span class="c1"># для того, чтобы отображать json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Перейдем к моделям:</p>

<p><em>models/question.rb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Question</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:location</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:questionable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:questionable_id</span><span class="p">,</span> <span class="ss">:questionable_type</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_save</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="nb">self</span><span class="o">.</span><span class="n">location</span> <span class="o">=~</span> <span class="sr">/_/</span>
</span><span class='line'>    <span class="n">location_id</span><span class="p">,</span> <span class="n">location_type</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">questionable_id</span>   <span class="o">=</span> <span class="n">location_id</span>   <span class="k">unless</span> <span class="n">location_id</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">questionable_type</span> <span class="o">=</span> <span class="n">location_type</span> <span class="k">unless</span> <span class="n">location_type</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Самая интересная строчка &ndash; это та, которая начинается с <code>belongs_to</code>, в ней мы объявляем полиморфную связь questionable. Дальше идет метод, который мы вызываем каждый раз перед сохранением в базу данных. В нем мы парсим строку из autoComplete&#8217;а, которая будет иметь вид id_ModelName и сохраняем отдельно id и ModelName.</p>

<p>Модель <em>city.rb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">City</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:questionable</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id_with_class_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span> <span class="nb">id</span> <span class="si">}</span><span class="s2">_</span><span class="si">#{</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В ней объявляется связь <code>has_many</code> через questionable, который мы обявили в модели question полиморфной. Далее идем метод, который возвращает id записи и название класса модели (чтобы можно было отделить зерно от плевел).</p>

<p>Модель <em>country.rb</em> почти такая же</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:questionable</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">id_with_class_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span> <span class="nb">id</span> <span class="si">}</span><span class="s2">_</span><span class="si">#{</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Связь обявлена также как и в предыдущей модели.</p>

<p>Наш маленький контроллер <em>QuestionController</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">QuestionsController</span> <span class="o">&lt;</span> <span class="ss">InheritedResources</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>где остальное спросите вы. Это все. Это все, что нам нужно для того, чтобы создавать, удалять, редактировать вопросы. Как вы, наверное, заметили наш контроллер наследуется не от ApplicationController&#8217;а, а от inherited_resources. Что это значит? А это значит, если абстрагироваться от 80% возможностей этого гема, то, что гем берет всю &ldquo;грязную&rdquo; работу на себя, предоставляя нам в пользование переменные resource и collection, хранятся в которых ссылка на текущую запись (resource) и список всех записей (collection) соответственно. Для того, чтобы мы смогли создать свой первый вопрос нам необходимы лишь вьюшки. Начнем с _form.html.erb, которую мы будем подключать и в создании вопроса, и в редактировании.</p>

<p><em>app/views/questions/</em>form.html.erb_</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= simple_form_for resource do |f| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;% pre =</span> <span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">questionable</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;% [resource.questionable].to_json(only: [:id, :name]) %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.input :name %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.input :location, input_html: { &#39;data-pre&#39; =</span><span class="o">&gt;</span> <span class="n">pre</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;token-input-questionable&#39;</span> <span class="p">}</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.submit nil %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Как видите, почти никаких различий с нативным form_for нет. Во второй строке мы заполняем переменную pre json&#8217;ом выбранного города или страны, в предпоследней создаем инпут с атрибутом data-pre, равным json&#8217;у и классом, чтобы мы могли найти этот элемент без проблем.</p>

<p><em>new.html.erb</em> и <em>edit.html.erb</em> абсолютно одинаковы и представляют собой следующее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;form&#39;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>в них мы отрисовываем только форму.</p>

<p>Далее кинем наш скачанный jquery.tokeninput.js в папку <em>app/assets/javascripts</em> и допишем в <em>application.js</em> следующее:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.token-input-questionable&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">$input</span><span class="p">.</span><span class="nx">tokenInput</span><span class="p">(</span><span class="s1">&#39;/questionable.json&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tokenLimit</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">tokenValue</span><span class="o">:</span> <span class="s1">&#39;id_with_class_name&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">prePopulate</span><span class="o">:</span> <span class="nx">$input</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;pre&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Первым параметром к tokenInput мы указываем откуда брать данные, tokenLimit:1 указывает на то, что одной записи нам будет достаточно (одного элемента из выпадающего списка), tokenValue &ndash; откуда мы будем брать имя, которое будем отображать из json&#8217;а, prePopulate используем для того, чтобы заполнить элемент, если мы его уже выбрали (редактирование).</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2012-04-polymorphic-relations-and-token-input-jquery/rsz_1screenshot_from_2012-04-18_230555-300x209.png"></p>

<p>Сумбурным получилось изложения материала, потому что для меня это в новинку и писалось это для того, чтобы не забыть полезную &ldquo;плюшку&rdquo; в дальнейшем. Если заметка кому-нибудь еще пригодится, я буду очень рад :)</p>

<p>P.S.: Если данную заметку читает Александр, мало ли, то, надеюсь, он будет не против, что я позаимствовал его идею :)</p>

<p>Демо проект &ldquo;лежит&rdquo; на <a href="http://vredniy-polymorphic.heroku.com/questions/">heroku</a>, репозиторий, как всегда на <a href="https://github.com/vredniy/rails-token-input">github</a> (там же лежат и миграции, нужные для запуска проекта).</p>

<p>Удачи вам в любых начинаниях и до новых встреч :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Собеседование и Unobtrusive Javascript на Rails]]></title>
    <link href="http://zudochkin.ru/2012/03/unobtrusive-javascript-rails"/>
    <updated>2012-03-30T14:55:02+04:00</updated>
    <id>http://zudochkin.ru/2012/03/unobtrusive-javascript-rails</id>
    <content type="html"><![CDATA[<p>Приветствую всех гостей и постояльцев на своем техническом, иногда не совсем, блоге. Кто читает меня в твиттере, наверное, помнят то, что вчера у меня было первое в жизни собеседование на ruby on rails вакансию, кто не читает, милости просим <a href="http://twitter.com/vredniy">дружить в твиттере</a>.<!-- more --></p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2012-03-unobtrusive-javascript-rails/ajax-crud-150x150.jpg"></p>

<p>Встретились мы сначала с генеральным директором, он рассказал о проекте, пока его не буду называть, но это компания, которая занимается развитием сайта, посвященному туризму: туры, бронирование отелей, такси и прочей смежной тематикой. Обсудили нетехнические вопросы. Затем подошел старший программист и по большей части мы уже общались непосредственно с ним. Конечно, сказывалось отсутствие большого опыта программирования на ruby и ruby on rails, но на большую часть вопросов, как мне кажется, я ответил правильно. Вопросы были следующего характера:</p>

<ul>
<li>какие виды связей и как их создать в rails</li>
<li>чем отличается include от extend&#8217;а</li>
<li>имеется ли множественное наследование в ruby</li>
</ul>


<p>Параллельно с вопросами я рассказывал о своих проектах и на ruby, и на php. Рассказал почему захотел перейти с php на ruby, как решал задачу из предыдущего поста тоже рассказал :).</p>

<p>После собеседования мне дали тестовое задание, оно заключается в следующем: необходимо без сторонних гемов, плагинов и библиотек реализовать простое приложение по управлению записями (обычный CRUD), только все это дело должно располагаться на одной странице, все запросы должны происходить в фоне (ajax) с применением unobtrusive javascript&#8217;а. Еще мне нужно было засечь сколько времени займет все это дело.</p>

<p>На ознакомление с мат. частью (railscasts, guides.rubyonrails и пр.), так сказать, ушло около двух часов, на реализацию проекта столько же. Что получилось и ссылку на репозиторий вы можете увидеть в конце данной заметки.</p>

<p>Итак, начнем.
Единственную &ldquo;плюшку&rdquo;, которую я применил в проекте был gem &lsquo;twitter-bootstrap-rails&rsquo; для придания &ldquo;красивости&rdquo;, на конечную функциональность он никак не повлиял.</p>

<p>Сначала, как и всегда, создаем проект <strong>rails new unobtrusive &amp;&amp; unobtrusive</strong>. Вписываем в <em>Gemfile</em>, что будем использовать twitter-bootstrap-rails <strong>gem &lsquo;twitter-bootstrap-rails&rsquo;</strong> и делаем <strong>bundle</strong>, чтобы обновить <em>Gemfile.lock</em></p>

<p>Далее установим нужные стили, js-файлы, написав в консоли <em>rails g bootstrap:install</em> и обновим наш шаблон <strong>application</strong> командой <em>rails g bootstrap:layout application fluid</em>.</p>

<p>Скаффолдом создадим все необходимое для задачи <em>rails g scaffold item name:string description:string</em>, теперь мы можем создавать, удалять и редактировать, но без ajax&#8217;а. Также давайте добавим красоты нашим item&#8217;ам <em>rails g bootstrap:themed Items</em>. Сейчас можно зайти на /items своего приложения и увидеть что получилось. Но нам пока рано останавливаться.</p>

<p>Давайте добавим валидацию, которую я упустил, в файл <strong>app/models/item.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Первой строкой мы добавляем, как, наверное, ясно из название, наличие и имени, и описания, второй мы проверям уникальность имени, чтобы не было двух айтемов с одним и тем же именем.</p>

<p>Далее давайте немного изменим нашу форму <strong>app/views/items/_form.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for @item, :remote =</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:html</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;form-horizontal&#39;</span> <span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div id=&quot;item_errors&quot; style=&quot;display:none; color: red&quot;&gt;</span><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  &lt;fieldset&gt;</span>
</span><span class='line'><span class="sr">    &lt;legend&gt;&lt;%= controller.action_name.capitalize %&gt; /</span><span class="no">Item</span><span class="o">&lt;</span><span class="sr">/legend&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    &lt;div class=&quot;control-group&quot;&gt;</span>
</span><span class='line'><span class="sr">      &lt;%= f.label :name, :class =&gt; &#39;control-label&#39; %&gt;</span>
</span><span class='line'><span class="sr">      &lt;div class=&quot;controls&quot;&gt;</span>
</span><span class='line'><span class="sr">        &lt;%= f.text_field :name, :class =&gt; &#39;text_field&#39; %&gt;</span>
</span><span class='line'><span class="sr">      &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    &lt;div class=&quot;control-group&quot;&gt;</span>
</span><span class='line'><span class="sr">      &lt;%= f.label :description, :class =&gt; &#39;control-label&#39; %&gt;</span>
</span><span class='line'><span class="sr">      &lt;div class=&quot;controls&quot;&gt;</span>
</span><span class='line'><span class="sr">        &lt;%= f.text_field :description, :class =&gt; &#39;text_field&#39; %&gt;</span>
</span><span class='line'><span class="sr">      &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    &lt;div class=&quot;form-actions&quot;&gt;</span>
</span><span class='line'><span class="sr">      &lt;%= f.submit nil, :class =&gt; &#39;btn btn-primary&#39; %&gt;</span>
</span><span class='line'><span class="sr">      &lt;%= link_to &#39;Cancel&#39;, items_path, :class =&gt; &#39;btn&#39; %&gt;</span>
</span><span class='line'><span class="sr">    &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/fieldset&gt;</span>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Небольшого изменения коснулась первоя строка, а именно добавился атрибут <strong>:remote => true</strong>, что сообщает рельсам задейстовать ujs (unobtrusive javascript). Также был добавлен тег с id item_errors, где мы будем выводить все ошибки валидации нашей модели.</p>

<p>Так как у нашего приложение будет только одна страница, можно смело избавляться от других вьюшек, заодно изменим наш контроллер <strong>app/controllers/items_controller.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_filter</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:find_an_item</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@item</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Successfully created item.&quot;</span>
</span><span class='line'>      <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@item</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Successfully updated item.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;create&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="vi">@item</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Successfully destroyed item.&quot;</span>
</span><span class='line'>    <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">find_an_item</span>
</span><span class='line'>      <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Тут я, конечно, перемудрил с before_filter&#8217;ами, но это то, как смог сделать за два часа. Как видите, контроллер шан стал намного полегче от того состояния, в котором он был после скаффолдинга: мы избавились от редиректов и вынести многое в before_filter&#8217;ы.</p>

<p>Далее я добавил в шаблон <strong>app/view/layouts/application.html.erb</strong> рядом с тем где выводится контент экшнов, вывод flash сообщения.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row-fluid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span9&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">id=</span><span class="s">&quot;flash_notice&quot;</span> <span class="na">style=</span><span class="s">&quot;color:green&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= yield %&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Это не весь шаблон, а только измененная его часть.</p>

<p>Дело за вьюшками, создадим <strong>_items.html.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table table-striped&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Name<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>Actions<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% @items.each do |item| %&gt;
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= item.id %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to item.name, item_path(item) %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= item.description %&gt;<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>
</span><span class='line'>          <span class="err">&lt;</span>%= link_to &#39;Edit&#39;, edit_item_path(item), :class =&gt; &#39;btn btn-mini&#39;, :remote =&gt; true %&gt;
</span><span class='line'>          <span class="err">&lt;</span>%= link_to &#39;Destroy&#39;, item_path(item), :method =&gt; :delete, :confirm =&gt; &#39;Are you sure?&#39;, :class =&gt; &#39;btn btn-mini btn-danger&#39;, :remote =&gt; true %&gt;
</span><span class='line'>        <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Здесь нет тоже ничего необычного, кроме атрибута <strong>:remote => true</strong> у ссылок. Тем самым мы сообщаем рельсам, чтобы они инициировали ajax запрос, вместо обычного get&#8217;а.</p>

<p>Так как мы создали все необходимые partial&#8217;ы, мы модем изменить наш index view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;item_form&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= render &#39;form&#39; %&gt;<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Items<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;items_list&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= render &#39;items&#39; %&gt;<span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Который только собирает воедино нашу форму и список айтемов. Если вы запустите сейчас приложение и попытаетесь создать что-либо или отредактировать, получите множество сообщений об ошибках, связанных с отсутствием нужных шаблонов (если вы удалили все вьюшки, кроме <strong>index.html.erb</strong>).</p>

<p>Теперь переходим к магии: вмето того, чтобы отдавать html файлы, мы будем отдавать javascript, который rails вставит в нушное место. Вместо create.html.erb, у нас будет <strong>app/views/items/create.js.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="vi">@item</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="o">-</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  $(&quot;#flash_notice&quot;).hide(300);</span>
</span><span class='line'><span class="sx">  $(&quot;#item_errors&quot;).html(&quot;&lt;%= escape_javascript(@item.errors.full_messages.join &#39;</span>
</span><span class='line'><span class="sx">&#39;).html_safe %&gt;</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">  $(&quot;</span><span class="c1">#item_errors&quot;).show(300);</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% else </span><span class="o">-</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  $(&quot;#item_errors&quot;).hide(300);</span>
</span><span class='line'><span class="sx">  $(&quot;#flash_notice&quot;).html(&quot;&lt;%= escape_javascript(flash[:notice]) %&gt;</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">  $(&quot;</span><span class="c1">#flash_notice&quot;).show(300);</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="s2">&quot;:input[type=text]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="s2">&quot;#items_list&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render &#39;items&#39;) %&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">-%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вкратце мы делаем следующее: если есть ошибки, то выводим их, если нет, то очищаем наши текстовые поля и обновляем список айтемов.</p>

<p>Самая длинная строчка в этом файле мне не очень понравилась, может можно как-то попроще, покороче?</p>

<p>Если запустить наше приложение, то вы сможете создавать новые записи, видеть сообщения об успешном или неуспешном (если возникли ошибки валидации) создании.</p>

<p>Также поступим с двумя оствшимися вьюшками <strong>app/views/items/edit.js.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;#item_form&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render &#39;form&#39;)%&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Где мы просто обновляем наш список элементов.</p>

<p>и <strong>app/views/items/destroy.js.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;#item_errors&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">hide</span><span class="p">();</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;#flash.notice&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(flash[:notice]) %&gt;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">show</span><span class="p">();</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;#items_list&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript( render &#39;items&#39;) %&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вот и все :) Заранее хочу извиниться за сумбурное, местами беглое, изложение, но я сейчас нахожусь в ожидании ответа от работодателя и не могу спокойно сидеть на месте :).</p>

<p>Репозиторий доступен, как всегда на <a href="https://github.com/vredniy/unobtrusive-javascript-rails">github</a>, работающее приложение на <a href="http://vredniy-unobtrusive.herokuapp.com/items">heroku</a></p>

<p>P.S. деплой на heroku</p>

<ul>
<li>запускаем <code>RAILS_ENV=production bundle exec rake assets:precompile</code>, чтобы скомпилировать наши стили и javascript&#8217;ы</li>
<li>заменяем в <strong>Gemfile</strong> sqlite3 на pg и далеем <em>bundle</em></li>
<li>создаем приложение на heroku <code>heroku create --stack cedar</code> (у вас приложение должно быть под git&#8217;ом и вы должны войти в heroku аккаунт)</li>
<li><code>git push heroku master</code> отправляем наше приложение за тысячи километров :)</li>
<li>на heroku сайт пишут, что нужно сделать <code>heroku run rake db:migrate</code>, но у меня с этим не вышло, поэтому я запустил эту же команду в фоновом режиме <code>heroku run:detached rake db:migrate</code></li>
<li>открываем приложение</li>
<li>наслаждаемся</li>
<li>и еще раз наслаждаемся :)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Поиграем? или совместное использование ruby и php]]></title>
    <link href="http://zudochkin.ru/2012/03/lets-game-with-ruby-and-php"/>
    <updated>2012-03-17T18:14:35+04:00</updated>
    <id>http://zudochkin.ru/2012/03/lets-game-with-ruby-and-php</id>
    <content type="html"><![CDATA[<p>Сегодня заметка будет посвящена теме далекой от веб-программирования, она будет посвящена немного алгоритмам, немного парсингу и немного Mongodb. Будем сегодня играть в игру.<!-- more --></p>

<p>Часто по вечерам мы с женой играем в приложение на iPad&#8217;е под названием Словомания.</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2012-03-lets-game-with-ruby-and-php/slovomania.jpeg"></p>

<p>Смысл в нем, как вы, наверное, заметили из названия, поиск слов. На входе матрица 4х4, можно начать из любой клетки и задействовать соседние по одному разу, чтобы отыскать имеющееся у них в словаре слово (в том словаре есть и наречия, и глаголы, и прилагательные, и конечно же существительные).</p>

<p>Задача: отыскать все слова. Но я немного облегчу себе задачу, потому как по примерным подсчетам в матрице 4х4 всевозможных комбинаций поиска слова около 16 миллионов, что даже по скромным подсчетам и при словаре в ~160 тысяч слов займет около 5 часов. В данной заметке мы будем использовать матрицу 3х3, что сокращает количество комбинаций до 8 с небольшим тысяч, что вполне приемлимо, но недостаточно быстро, для одной игры, которая длится около минуты. Да и плевать, для меня главное решить задачу, хоть и читерить в игре не получится ).</p>

<p>Для начала отыщем все возможные комбинации, для этого воспользуемся php-скриптом <a href="http://zudochkin.ru/2011/02/depth-first-search-php/">поиска в ширину</a>, немного его изменив для наших нужд. На выходе должны получить файл, где в каждой строке одна комбинация.</p>

<p>Цифры на матрице я обозначил от 1 до 9 (3х3), поэтому в выходном файле будут строки подобного вида &ndash; 1,2,3,6,5,4,7,8,9.</p>

<p>Но сначала нам пригодится небольшой скрипт, который поможет построить граф для таблицы 3х3.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;%-2s&quot;</span> <span class="o">%</span> <span class="n">i</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>На выходе получим таблицу</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>которая поможет нам построить граф, ключами массива которого будут вершины &ldquo;откуда&rdquo;, значениями &ndash; точки &ldquo;куда&rdquo;, мы можем попасть из данной вершины. Из таблицы следует, что из точки 1, мы можем попасть в точки: 2,5 (по диагонали тоже можно) и 4. Так нам нужно описать каждую вершину графа.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">array</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;2&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;3&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;4&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;5&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;6&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;7&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;8&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;9&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># циклы по всем вершинам графа,</span>
</span><span class='line'><span class="c1"># каждая вершина может быть начальной и конечной</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">find_path</span><span class="p">(</span><span class="nv">$graph</span><span class="p">,</span> <span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="nv">$i</span><span class="p">,</span> <span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="nv">$j</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># избавляемся от дубликатов</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_unique</span><span class="p">(</span><span class="nv">$paths</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">Количество комбинаций: &quot;</span><span class="p">,</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$result</span><span class="p">),</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># записываем результаты в файл</span>
</span><span class='line'><span class="nv">$fh</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;combinations.dat&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fh</span><span class="p">,</span> <span class="nb">implode</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="nv">$result</span><span class="p">));</span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>В коде старался комментировать каждый момент, поэтому, думаю, должно быть понятно. На выходе у нас файлы <em>combinations.dat</em> с 8175 строками из всевозможных комбинаций.</p>

<p>Теперь давайте подготовим наш словарь. Я скачал какой-то орфографический словарь, каждая строка которого предствляла собой следующее <code>жопа#жопа %жопа, -ы</code></p>

<p>Я решил сохранить два первых слова, точнее слово и ударение (которое в данном проекте не используется). Первое слово отделено от второго #, второе от остального %. По мере парсинга словаря, мы будем записывать все слова в нашу mongo базу данных для быстрого поиска по ней в дальнейшем.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_mapper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MongoMapper</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s1">&#39;words&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Word</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">MongoMapper</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;./dic.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># цикл по всем строкам словаря</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">word</span><span class="p">,</span> <span class="n">word2</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)</span> <span class="c1"># отделяем первое слово</span>
</span><span class='line'>  <span class="n">word2</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># и второе</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">word</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">word2</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># и сохраняем его</span>
</span><span class='line'>  <span class="no">Word</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:word</span> <span class="o">=&gt;</span> <span class="n">word</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:word2</span> <span class="o">=&gt;</span> <span class="n">word2</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Если вам лень запускать подобный скрипт, то в корне проекта лежит файл <em>words.json</em>, содержащий все слова, вы можете импортировать его в свою mongo базу командой <code>mongoimport -d DB -c COLLECTION words.json</code>.
Далее, чтобы ускорить и без того медленное приложение, нужно создать индекс в базе на поле word, запускаем mongo-терминал, выбираем базу данных <em>use DB</em> и пишем следующее
<code>db.COLLECTION.ensureIndex({word: 1})</code>, где DB &ndash; имя ваше базы данных, а COLLECTION &ndash; имя коллекции.</p>

<p>Итак, переходим к завершающей части &ndash; моменту истины, так сказать, поиску слов.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_mapper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MongoMapper</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s1">&#39;words&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Word</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">MongoMapper</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># файл с полученным в предыдущих шагах комбинациями</span>
</span><span class='line'><span class="no">COMBINATIONS_FILE</span> <span class="o">=</span> <span class="s1">&#39;./combinations.dat&#39;</span>
</span><span class='line'><span class="c1"># файл с результатами</span>
</span><span class='line'><span class="no">OUTPUT_FILE</span> <span class="o">=</span> <span class="s1">&#39;./results.dat&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># наше игровое поле</span>
</span><span class='line'><span class="n">alphabet</span> <span class="o">=</span> <span class="sx">%w{</span>
</span><span class='line'><span class="sx">  к о ж</span>
</span><span class='line'><span class="sx">  а п у</span>
</span><span class='line'><span class="sx">  а р р</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># поиск текущего слова в словаре</span>
</span><span class='line'><span class="k">def</span> <span class="nf">find_a_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="no">Word</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:word</span> <span class="o">=&gt;</span> <span class="n">word</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">w</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">w</span><span class="o">.</span><span class="n">word</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># из комбинации, учитывая alphabet, составляем &quot;слово&quot;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">number_to_letters</span><span class="p">(</span><span class="n">alphabet</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>  <span class="n">letters</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">word</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">letters</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">letter</span><span class="o">|</span>
</span><span class='line'>    <span class="n">word</span> <span class="o">&lt;&lt;</span> <span class="n">alphabet</span><span class="o">[</span><span class="n">letter</span><span class="o">.</span><span class="n">to_i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">word</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># основной цикл приложение</span>
</span><span class='line'><span class="c1"># проходимся во всему списку комбинаций</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">COMBINATIONS_FILE</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># составляем слово</span>
</span><span class='line'>    <span class="n">n_t_l</span> <span class="o">=</span> <span class="n">number_to_letters</span><span class="p">(</span><span class="n">alphabet</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># находим в бд</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">find_a_word</span><span class="p">(</span><span class="n">n_t_l</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">nil?</span> <span class="k">then</span> <span class="c1"># если нашли</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">n_t_l</span> <span class="c1"># выводим его</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">OUTPUT_FILE</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">output</span><span class="o">|</span>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="n">puts</span> <span class="n">n_t_l</span> <span class="c1"># и записываем в файл</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>После этого запускаем скрипт <code>ruby find-words.rb</code>, откидываемся на спинку стула и ждем результат. Начнут появляться на экране слова, которые были найдены этим скриптом, возможны повторения, потому что одно слово может быть составлено из разных комбинаций.</p>

<p>Удачи в кодинге и побольше интересных задач, которые вам под силу решить :).</p>

<p>P.S.: репозиторий, как всегда, доступен на <a href="https://github.com/vredniy/game-ruby-php">github</a>.</p>

<hr />

<p>update 25.03.2012
Все-таки намного интереснее заставить приложение работать как задумывалось, а именно, чтобы оно находило слова из матрицы 4х4. Для этого мною были предприняты следующие меры:</p>

<ul>
<li>удаление лишних слов из словаря</li>
<li>оптимизация самого алгоритма</li>
<li>сужение диапазона поиска</li>
</ul>


<h3>Удаление лишних слов из словаря</h3>

<p>Пробежался я по словарю и понял, что там много слово, содержащих дефисы, скобки, пробелы. Некоторые слова состояли из одной-двух букв. Я решил с ними попрощаться, благо mongo поддерживает регулярные выражения.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MongoMapper</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s1">&#39;words&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Word</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">MongoMapper</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#s = Word.all(:word =&gt; /^.*[-А-Я].*$/).each do |word|</span>
</span><span class='line'><span class="c1">#s = Word.all(:word =&gt; /^.*[ё].*$/).each do |word|</span>
</span><span class='line'><span class="c1">#s = Word.all(:word =&gt; /^.*[\(\)\.\s+].*$/).each do |word|</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Word</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:word</span> <span class="o">=&gt;</span> <span class="sr">/^.*[-,.:;].*$/</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="n">word</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Запускаем и удаляем ненужные слова, из 160 тысяч слов, останется 140 тысяч, неплохо :)</p>

<h3>Оптимизация самого алгоритма</h3>

<p>Самый быстрый код &ndash; это мало кода. Поэтому максимально постараемся избавиться от методов. Выбросив все лишнее получим следующее.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_mapper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MongoMapper</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s1">&#39;words&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Word</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">MongoMapper</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">COMBINATIONS_FILE</span> <span class="o">=</span> <span class="s1">&#39;./game.dat&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Alphabet</span> <span class="o">=</span> <span class="sx">%w{</span>
</span><span class='line'><span class="sx">ё ж е т</span>
</span><span class='line'><span class="sx">у ч е р</span>
</span><span class='line'><span class="sx">к о ю т</span>
</span><span class='line'><span class="sx">р м п ь</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="n">_start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">combinations</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">COMBINATIONS_FILE</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">gets</span><span class="p">)</span>
</span><span class='line'>      <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span> <span class="n">line</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>          <span class="n">w</span> <span class="o">=</span> <span class="no">Word</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="ss">:word</span> <span class="o">=&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="no">Alphabet</span><span class="o">[</span><span class="n">l</span><span class="o">.</span><span class="n">to_i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span> <span class="p">)</span>
</span><span class='line'>          <span class="n">line</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>          <span class="n">combinations</span> <span class="o">&lt;&lt;</span> <span class="n">w</span><span class="o">.</span><span class="n">word</span> <span class="k">unless</span> <span class="n">w</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">counter</span> <span class="o">%</span> <span class="mi">100_000</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="nb">p</span> <span class="n">combinations</span><span class="o">.</span><span class="n">join</span> <span class="s1">&#39; &#39;</span> <span class="k">unless</span> <span class="n">combinations</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">combinations</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>        <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">counter</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">_start</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Код получился намного &ldquo;легче&rdquo; и быстрее.</p>

<h3>Сужаем диапазон поиска</h3>

<p>Чтобы хоть как-то еще прибавить скорость, я сузил длину слова, теперь проверяются только строки от 3 до 9 символов, это тоже очень хорошо сужает конечную выборку.</p>

<h3>Обратная связь приветствуется</h3>

<p>Если вы видите, что есть какие-то неточности или гипотезы по поводу оптимизации быстродействия кода, то всегда пожалуйста, я открыт для обсуждения всегда.</p>

<p>Не хочу быть излишне самоуверенным, но мне, кажется, что сейчас весь алгоритм упирается в &ldquo;железо&rdquo;, точнее скорость считывания с диска. (К сожалению, у меня нет ssd диска, чтобы это проверить).</p>

<p>В заключение картинка с какой скоростью отрабатывает скрипт. Первое число на картинке &ndash; количество секунд на 100_000 строк, считанных из файла и проверенных с каждой строкой словаря, содержащего ~ 140.000 слов. Второе число &ndash; сколько строк уже просмотрено. Всего комбинаций получилось, если рассматривать поле 4х4 &ndash; 12.000.000 штук. :)</p>

<p><img class="image" src="http://zudochkin.ru/images/posts/2012-03-lets-game-with-ruby-and-php/optimization.jpeg"></p>

<hr />

<h3>Обновление от 27.03.2012 (redis)</h3>

<p>Пришла еще одна мысля по оптимизации данного приложения, вместо mongodb, я решил попробовать использовать redis &ndash; очень быстрое ключ-значение хранилище.</p>

<p>Сначала нужно экспортировать базу mongo в redis, тут ничего сложного (с учетом того, что у вас и сам redis установлен, и redis gem).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_mapper&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MongoMapper</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s1">&#39;words&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Word</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">MongoMapper</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:word</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="mi">6379</span><span class="p">)</span>
</span><span class='line'><span class="no">Word</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span>
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">word</span>
</span><span class='line'>  <span class="k">unless</span> <span class="sr">/[-А-Я\(\)]/</span><span class="o">.</span><span class="n">match</span> <span class="n">w</span>
</span><span class='line'>    <span class="n">redis</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&quot;word:</span><span class="si">#{</span><span class="n">w</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Пробегаемся по всем словам из коллекции mongodb и сохраняем все слова в redis под ключом word:СЛОВО, чтобы не перепутать с другими ключами.</p>

<p>Теперь основной файл, только в качестве хранилища мы будем использовать redis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="mi">6379</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">COMBINATIONS_FILE</span> <span class="o">=</span> <span class="s1">&#39;./game.dat&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Alphabet</span> <span class="o">=</span> <span class="sx">%w{</span>
</span><span class='line'><span class="sx">ё ж е т</span>
</span><span class='line'><span class="sx">у ч е р</span>
</span><span class='line'><span class="sx">к о ю т</span>
</span><span class='line'><span class="sx">р м п ь</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">16</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;%-3s&quot;</span> <span class="o">%</span> <span class="no">Alphabet</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">_start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">combinations</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">COMBINATIONS_FILE</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span> <span class="n">line</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="n">w</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;word:&quot;</span> <span class="o">+</span> <span class="n">line</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="no">Alphabet</span><span class="o">[</span><span class="n">l</span><span class="o">.</span><span class="n">to_i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">)</span>
</span><span class='line'>      <span class="n">line</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">combinations</span> <span class="o">&lt;&lt;</span> <span class="n">w</span> <span class="k">unless</span> <span class="n">w</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">counter</span> <span class="o">%</span> <span class="mi">100_000</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">combinations</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">join</span> <span class="s1">&#39; &#39;</span> <span class="k">unless</span> <span class="n">combinations</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">combinations</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">counter</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">_start</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">counter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Вывод: приложение стало заметно быстрее (в 3-5 раз), скриншот прилагаю.
<img class="image" src="http://zudochkin.ru/images/posts/2012-03-lets-game-with-ruby-and-php/redis-game.png"></p>

<p>Надеюсь, смогу добиться скорость выполнения в раза больше, чем сейчас. Мне нужно чтобы приложение проходило по всем комбинациям, сравнивая со всем словами в словаре и тратило при этом меньше минуты, сейчас около 3х.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[arbor.js: красивые графы на стороне клиента с помощью Ruby]]></title>
    <link href="http://zudochkin.ru/2012/02/arbor-js-ruby-sinatra"/>
    <updated>2012-02-25T17:24:37+04:00</updated>
    <id>http://zudochkin.ru/2012/02/arbor-js-ruby-sinatra</id>
    <content type="html"><![CDATA[<p>Сегодня мы займемся рисованием интерактивного графа на стороне клиента. На графе, чтобы далеко не ходить в поисках данных, будет изображать тех, кого читаем в твиттере. <!--more--></p>

<h3>Требования</h3>

<ul>
<li>Граф должен выглядеть привлекательно</li>
<li>При наведении на вершину графа мы должны получать дополнительную информацию, в данном приложении &ndash; это имя твиттерянина, картинка профиля, количество дней прошедших с регистрации и дата регистрации</li>
<li>Backend&#8217;ом будет выступать Mongo с Rack прослойкой в виде Sinatra</li>
</ul>


<h3>Этапы разработки</h3>

<ul>
<li>Определяемся с инструментарием</li>
<li>Немного проектирования</li>
<li>Регистрируем наше Twitter приложение</li>
<li>Сохраняем всех наших друзей в Mongo</li>
<li>Шаблоны, скрипты и стили на клиенте</li>
</ul>


<h5>Определяемся с инструментарием</h5>

<p>В пункте с требованиями я уже сказал, что мы будем использовать Mongo в связке MongoMapper&#8217;ом, для удобного хранения наших друзей с нужной нам информацией (именем, датой регистрации, картинкой и пр.). Для удобного взимодействия с Twitter API, используем gem Twitter, который предоставляет полный контроль через Twitter приложение.</p>

<h5>Немного проектирования</h5>

<p>Что мы имеем? На главной странице (/) будет отображаться сам граф, данные по средством ajax-запроса к серверу будут приходить от /json (данные будем возвращать в json&#8217;е). Обновлять список пользователей мы будем по адресу /friends (получаем список всех пользователей, которых мы читаем и запрашиваем их дополнительные данные, сохраняя все в базу).</p>

<h5>Регистрируем наше Twitter приложение</h5>

<p><img class="image" src="http://zudochkin.ru/images/posts/2012-02-arbor-js-ruby-sinatra/twitter-application-800x614.png">Т.к. все взаимодействие с Twitter API происходит через Twitter приложение, нам необходимо его создать, для этого заходим в <a href="https://dev.twitter.com/apps/new">раздел для разработчиков</a>. Заполняем обязательные поля и нажимаем кнопку &ldquo;Create your twitter application&rdquo;. Спустя несколько секунд мы оказываемся на странице созданного приложения. Прокрутив вниз, мы увидим кнопку &ldquo;Create my access token&rdquo;, нажав на которую мы заполним Access token и Access token secret для нашего приложения. Полученные ключи можно лицезреть на вкладке &ldquo;OAuth tool&rdquo; под заголовком &ldquo;OAuth Settings&rdquo;. Все четыре строчки нам понадобятся чуть позже.</p>

<h5>Сохраняем всех наших друзей в Mongo</h5>

<p>Итак, приступим непосредственно к написанию кода. К этому моменту у вас должно быть рабочее Twitter приложение, установленный Mongo (освещение установки выходит за рамки данной заметки).</p>

<p>Вначале, как всегда, стандартный <strong>./config.ru</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./twitter.rb&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Application</span>
</span></code></pre></td></tr></table></div></figure>


<p>Дальше создадим <strong>./Gemfile</strong>, который будет содержать все гемы, которые мы используем</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="ss">:rubygems</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bson_ext&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongo_mapper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>После этого запустим <em>bundle install</em>, что создаст нам Gemfile.lock</p>

<p>А теперь наше приложение <strong>./twitter.rb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: UTF-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo_mapper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Подключаем необходимые гемы.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Twitter</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="s1">&#39;YOUR_CONSUMER_KEY&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="s1">&#39;YOUR_CONSUMER_SECRET&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token</span> <span class="o">=</span> <span class="s1">&#39;YOUR_ACCESS_TOKEN&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">oauth_token_secret</span> <span class="o">=</span> <span class="s1">&#39;YOUR_ACCESS_SECRET&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Конфигурируем twitter (заполните строки выше теми данными, которые вы получили после регистрации twitter приложения), привязывая его к нашему приложению.</p>

<p>Теперь настроим MongoMapper, указав ему с какими данными мы хотим работать.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MongoMapper</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="s1">&#39;users&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">MongoMapper</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:screen_name</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:profile_image_url</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:followers_count</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:statuses_count</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:friends_count</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:lang</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:url</span>
</span><span class='line'>  <span class="n">key</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="no">DateTime</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># id location notifications profile_image_url profile_image_url_https profile_background_color</span>
</span><span class='line'>  <span class="c1"># followers_count default_profile time_zone is_translator utc_offset profile_background_image_url</span>
</span><span class='line'>  <span class="c1"># statuses_count profile_link_color name friends_count listed_count protected</span>
</span><span class='line'>  <span class="c1"># profile_use_background_image profile_background_image_url_https contributors_enabled lang</span>
</span><span class='line'>  <span class="c1"># profile_text_color follow_request_sent description profile_sidebar_border_color show_all_inline_media</span>
</span><span class='line'>  <span class="c1"># url verified default_profile_image created_at profile_background_tile favourites_count id_str</span>
</span><span class='line'>  <span class="c1"># following profile_sidebar_fill_color geo_enabled screen_name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Сначала указываем базу данных (&lsquo;users&rsquo;), дальше описываем поля. Закомментированные строки &ndash; это дополнительные поля, которые вы можете использовать при получении данных твиттер-пользователя.</p>

<p>Пришло время написать экшн, которые сохранит всех наших друзей в базе Mongo и здесь нет ничего сложного.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/friends&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">remove</span> <span class="c1"># очищаем коллекцию</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">friends</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">.</span><span class="n">friend_ids</span> <span class="c1"># получаем список всех друзей</span>
</span><span class='line'>  <span class="n">friend_ids</span> <span class="o">=</span> <span class="n">friends</span><span class="o">.</span><span class="n">ids</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">friend_ids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="c1"># проходимся по каждому и</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">twi_user</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">.</span><span class="n">user</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="c1"># получаем данные, отправляет запрос на сервер Twitter&#39;а</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span> <span class="c1"># заполняем поля</span>
</span><span class='line'>        <span class="ss">:screen_name</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:profile_image_url</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:followers_count</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">followers_count</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:statuses_count</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">statuses_count</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:friends_count</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">friends_count</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:lang</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">lang</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">url</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">twi_user</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span> <span class="c1"># обрабатываем исключение</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span> <span class="c1"># получаем всех сохраненных пользователей</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:friends</span> <span class="c1"># отображаем их</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Чтобы наш экшн отработал, на необхомо создать файл <strong>./views/friends.erb</strong> со следующим содержимым:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @users.each </span><span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;h5&gt;</span><span class="o">&lt;</span><span class="sx">%= u.name %&gt; - &lt;%=</span> <span class="n">u</span><span class="o">.</span><span class="n">screen_name</span> <span class="sx">%&gt;&lt;/h5&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;&lt;%= u.profile_image_url %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&lt;%=</span> <span class="n">u</span><span class="o">.</span><span class="n">created_at</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">hr</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Который не делает ничего более того, что отображает в цикле всех пользователей с картикой профиля. (Это нужно для того, чтобы убедиться в том, что все работает как ожидалось).</p>

<h5>Шаблоны, скрипты и стили на клиенте</h5>

<p>Сначала создадим шаблон для всех наших представлений, <strong>./views/layout.erb</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>   <span class="nt">&lt;title&gt;</span>Twitter friends (arbor.js + Ruby)<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>   <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>   <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/arbor.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>   <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/application.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>   <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;/styles/application.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>   <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>В котором мы подключаем библиотеку jQuery через Google CDN, файл arbor.js, который вы можете скачать <a href="https://github.com/samizdatco/arbor">отсюда</a> (данная библиотека используется нами для визуализации графа на стороне клиента).</p>

<p>Файл arbor.js необходимо положить в папку <strong>./public/js/arbor.js</strong></p>

<p>Далее напишем последний скрипт, который будет обрабатывать события отрисовки, drag&drop;&lsquo;а и загрузки данных ajax&#8217;ом. (За основу взят пример с сайта arbor.js). <strong>./js/application.js</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Renderer</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">canvas</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">particleSystem</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">dom</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">init</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">system</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">particleSystem</span> <span class="o">=</span> <span class="nx">system</span>
</span><span class='line'>          <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">screenSize</span><span class="p">(</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">screenPadding</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span> <span class="c1">// leave an extra 80px of whitespace per side</span>
</span><span class='line'>          <span class="nx">that</span><span class="p">.</span><span class="nx">initMouseHandling</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">redraw</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s2">&quot;white&quot;</span>
</span><span class='line'>          <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">eachEdge</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">edge</span><span class="p">,</span> <span class="nx">pt1</span><span class="p">,</span> <span class="nx">pt2</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="s2">&quot;rgba(88,0,0, .133)&quot;</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineWidth</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">()</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">pt1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">pt1</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">pt2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">pt2</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">()</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">eachNode</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="nx">pt</span><span class="p">){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>   <span class="c1">//ширина квадрата</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;Я&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;yellow&#39;</span> <span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">color</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">pt</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nx">pt</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span><span class="nx">w</span><span class="p">);</span> <span class="c1">//рисуем</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;Я&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;green&#39;</span> <span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span> <span class="c1">//цвет для шрифта</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;Я&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;bold 18px sans-serif&#39;</span> <span class="o">:</span> <span class="s1">&#39;italic 13px sans-serif&#39;</span><span class="p">;</span> <span class="c1">//шрифт</span>
</span><span class='line'>            <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillText</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">pt</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">,</span> <span class="nx">pt</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="mi">8</span><span class="p">);</span> <span class="c1">//пишем имя у каждой точки</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">initMouseHandling</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">dragged</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">moved</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">offset</span><span class="p">();</span>
</span><span class='line'>                <span class="nx">_mouseP</span> <span class="o">=</span> <span class="nx">arbor</span><span class="p">.</span><span class="nx">Point</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="nx">pos</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="nx">pos</span><span class="p">.</span><span class="nx">top</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">nearest</span> <span class="o">=</span> <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">nearest</span><span class="p">(</span><span class="nx">_mouseP</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">nearest</span><span class="p">.</span><span class="nx">node</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#status h1&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">nearest</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">full_name</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#status .image&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">nearest</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">image</span><span class="p">));</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#status .ago&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">nearest</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">days</span> <span class="o">+</span> <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">&#39;</span> <span class="o">+</span> <span class="nx">nearest</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">created_at</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">clicked</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">offset</span><span class="p">();</span>
</span><span class='line'>              <span class="nx">_mouseP</span> <span class="o">=</span> <span class="nx">arbor</span><span class="p">.</span><span class="nx">Point</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="nx">pos</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="nx">pos</span><span class="p">.</span><span class="nx">top</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">dragged</span> <span class="o">=</span> <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">nearest</span><span class="p">(</span><span class="nx">_mouseP</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">dragged</span> <span class="o">&amp;&amp;</span> <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">fixed</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">dragged</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mouseup&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">dropped</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">that</span><span class="p">.</span><span class="nx">redraw</span><span class="p">();</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">dragged</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">offset</span><span class="p">();</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">arbor</span><span class="p">.</span><span class="nx">Point</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="o">-</span><span class="nx">pos</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="o">-</span><span class="nx">pos</span><span class="p">.</span><span class="nx">top</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">dragged</span> <span class="o">&amp;&amp;</span> <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">particleSystem</span><span class="p">.</span><span class="nx">fromScreen</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">p</span> <span class="o">=</span> <span class="nx">p</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">dropped</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">dragged</span><span class="o">===</span><span class="kc">null</span> <span class="o">||</span> <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span><span class="o">===</span><span class="kc">undefined</span><span class="p">)</span> <span class="k">return</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">fixed</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>              <span class="nx">dragged</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">tempMass</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class='line'>              <span class="nx">dragged</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">dragged</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;mouseup&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">dropped</span><span class="p">)</span>
</span><span class='line'>              <span class="nx">_mouseP</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">mousedown</span><span class="p">(</span><span class="nx">handler</span><span class="p">.</span><span class="nx">clicked</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="nx">canvas</span><span class="p">).</span><span class="nx">mousemove</span><span class="p">(</span><span class="nx">handler</span><span class="p">.</span><span class="nx">moved</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">that</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">sys</span> <span class="o">=</span> <span class="nx">arbor</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span> <span class="c1">// create the system with sensible repulsion/stiffness/friction</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">sys</span><span class="p">.</span><span class="nx">renderer</span> <span class="o">=</span> <span class="nx">Renderer</span><span class="p">(</span><span class="s2">&quot;#viewport&quot;</span><span class="p">)</span> <span class="c1">// our newly created renderer will have its .init() method called shortly by sys...</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">sys</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="s1">&#39;Я&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">sys</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="s1">&#39;Кто-то другой&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;/json&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">nodes</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">sys</span><span class="p">.</span><span class="nx">addNode</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">days</span><span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">days</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">image</span><span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">full_name</span><span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">full_name</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">color</span><span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">created_at</span><span class="o">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">created_at</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">sys</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="s1">&#39;Я&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">})(</span><span class="k">this</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>В строках 106-117 мы получаем данные с сервера, заполняя каждую ноду именем и данными, которые будет использовать далее.</p>

<p>Отрисовка происходит в строках 29-36, а обработка события перемещения мыши в 42-51, где мы сохраненные в ноде данные отображаем (для этого используем возможности движка по нахождению ближайшей к указателю мыши ноды).</p>

<p>Шаблон для отображения главной страницы <strong>./views/index.erb</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;status&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;image&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>   <span class="nt">&lt;h1&gt;</span>Я<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>   <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;ago&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;clear&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;viewport&quot;</span> <span class="na">width=</span><span class="s">&quot;1000&quot;</span> <span class="na">height=</span><span class="s">&quot;700&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>В нем мы создаем статусбар и канвас, в котором и будет отображать наш граф и обрабатывать события.</p>

<p>Добавим к нашему <strong>./twitter.rb</strong> последний штрих, точнее два, вывод главной страницы и отправка данных ajax&#8217;ом.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:&#39;index&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/json&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content_type</span> <span class="ss">:json</span>
</span><span class='line'>  <span class="n">users</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span>
</span><span class='line'>    <span class="n">users</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">screen_name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:full_name</span> <span class="o">=&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:days</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">-</span><span class="no">DateTime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">to_i</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">profile_image_url</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:color</span> <span class="o">=&gt;</span> <span class="s2">&quot;#%06x&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">rand</span> <span class="o">*</span> <span class="mh">0xffffff</span><span class="p">),</span>
</span><span class='line'>      <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="ss">nodes</span><span class="p">:</span> <span class="n">users</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>В методе <em>/json</em> мы проходимся по списку всех пользователей, которых мы сохранили в методе <em>/friends</em> и собираем json объект, который и выводим с заголовком <em>content_type :json</em></p>

<p>Единственное, что может показаться странным, так это конструкция <em>(DateTime.now-DateTime.strptime(u.created_at.to_s, &lsquo;%Y-%m-%d&rsquo;)).to_i</em>, которая считает разницу в днях между днем регистрации пользователя и текущим днем, и конструкция <em>&ldquo;#%06x&rdquo; % (rand * 0xffffff)</em>, которая генерирует случайный цвет в формате #1234ab, остальные строки, надеюсь, прозрачны и легки к пониманию.</p>

<h3>Демонстрация и заключение</h3>

<p>Видео, демонстрирующее возможности разработонного приложения смотрите ниже, из него, я думаю, все станет понятно, что нельзя сказать о кучи текста и кода. Как говорят, лучше один раз увидеть, чем несколько раз прочитать.</p>

<iframe width="560" height="315" src="http://zudochkin.ru//www.youtube.com/embed/-SX1AVO_bj0" frameborder="0" allowfullscreen></iframe>


<p>В качестве заключения хочу сказать следующее: arbor.js &ndash; очень мощная библиотека для отрисовки графов на стороне клиента, которая загружает процессор на 100%, но позволяет, чертовка, визуализировать графы наглядно и красиво. Еще в данной заметке мы с вами познакомились очень поверхностно с Twitter гемом, который позволяет создавать приложения для взаимодействия с Twitter API. Надеюсь, потраченное на прочтение данной заметки, не было бесполезным :) и до новых встреч.</p>

<p>P.S.: ссылка на <a href="https://github.com/vredniy/arbor-twitter-sinatra">репозиторий на Github</a></p>
]]></content>
  </entry>
  
</feed>
