<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cms | Записки Вредного программиста]]></title>
  <link href="http://zudochkin.ru/blog/categories/cms/atom.xml" rel="self"/>
  <link href="http://zudochkin.ru/"/>
  <updated>2014-02-09T16:59:49+04:00</updated>
  <id>http://zudochkin.ru/</id>
  <author>
    <name><![CDATA[Зудочкин Дима]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zend Framework: вставляем viewHelper куда душе угодно]]></title>
    <link href="http://zudochkin.ru/2011/05/view-helper-wherever-u-want"/>
    <updated>2011-05-16T15:02:21+04:00</updated>
    <id>http://zudochkin.ru/2011/05/view-helper-wherever-u-want</id>
    <content type="html"><![CDATA[<p>Здравствуйте, уважаемые коллеги-разработчики, в сегодняшней заметке я поделюсь с вами своим костылем-решением. Пишу в свободное время свою модульную CMS (ведь каждый разработчик должен написать в своей жизни хотя бы одну) на базе Zend Framework'а и возникла необходимость вставлять в контент форму обратной связи и еще что-нибудь в произвольное место. Для создания стратичных страниц я использую свой модуль Static, который ничего не умеет, кроме создания стратичных страниц WYSIWYG'ом и прикрепления к уже имеющимся.</p>

<!-- more -->


<p><a href="/images/posts/2011-05-view-helper-wherever-u-want/content-replacer.png"><img class="image" src="/images/posts/2011-05-view-helper-wherever-u-want/content-replacer-150x150.png"></a></p>

<p>Первое, что пришло в голову это заменять какой-нибудь placeholder аля {placeholder_feedback_form(0)} на содержимое. Сказано-сделано, приведу кусок view Helper'а, который отображает нестандартную форму и валидирут посредстом отправления AJAX запросов на сервер.</p>

<h3>View_Helper: на что будем менять</h3>

<p>``` php
&lt;?php</p>

<p>class Feedback_View_Helper_Form extends Zend_View_Helper_Abstract
{</p>

<pre><code>// form with ajax validation
public function form($form = null)
{
    $html = &lt;&lt;&lt; karamba
    &lt;form action="#" method="post"&gt;
            &lt;div class="fancyform"&gt;
                    &lt;label for="username"&gt;&lt;span&gt;Ваше имя&lt;/span&gt;&lt;/label&gt;
                    &lt;div class="it"&gt;&lt;div&gt;&lt;input type="text" name="username" id="username"&gt;&lt;/div&gt;&lt;/div&gt;
                    &lt;label for="email"&gt;&lt;span&gt;Ваш E-mail&lt;/span&gt;&lt;/label&gt;
                    &lt;div class="it"&gt;&lt;div&gt;&lt;input type="text" name="email" id="email"&gt;&lt;/div&gt;&lt;/div&gt;
                    &lt;label for="phone"&gt;&lt;span&gt;Ваш телефон&lt;/span&gt;&lt;/label&gt;
                    &lt;div class="it"&gt;&lt;div&gt;&lt;input type="text" name="phone" id="phone"&gt;&lt;/div&gt;&lt;/div&gt;
                    &lt;div class="ta"&gt;&lt;div&gt;&lt;textarea name="message"&gt;&lt;/textarea&gt;&lt;/div&gt;&lt;/div&gt;
                    &lt;div class="is"&gt;&lt;div&gt;&lt;input type="submit" name="submit" id="submit" value="Отправить"&gt;&lt;/div&gt;&lt;/div&gt;
                    &lt;p class="spasibo"&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
            &lt;/div&gt;&lt;!-- /fancyform --&gt;
    &lt;/form&gt;
</code></pre>

<p>karamba;</p>

<pre><code>    $view = Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer')-&gt;view;
    $view-&gt;headScript()-&gt;captureStart() ?&gt;
        $().ready(function() {
            $('form').submit(function() {
                $.get('/feedback', $(this).serialize(), function(response) {
                    if ('ok' == response.code) {
                        // transmission completed
                        $(':input', 'form')
                            .not(':button, :submit, :reset, :hidden')
                            .val('')
                        $('p.spasibo span').text('Спасибо! Обязательно отвечу!');
                    } else {
                        // print error message
                        $('p.spasibo span').text('Ошибка при заполнении');
                    }
                }, 'json');
                return false;
            });
        });
    &lt;?php $view-&gt;headScript()-&gt;captureEnd();
    return $html;
}
</code></pre>

<p>}
```</p>

<p>данный view Helper у меня располагается в папке <strong>application/modules/feedback/view/helpers/Form.php</strong></p>

<h3>Action_Helper: замена placeholder'ов</h3>

<p>Более или менее универсальное решение по замене placeholder'ов вида <strong>{placeholder<em>%moduleName%</em>%viewHelper(%param%)}</strong> реализовал в виде Action Helper'а, вот его код</p>

<p>``` php
&lt;?php</p>

<p>/<em>*
 * content replacer
 *
 * replace {placeholder_moduleName_helperName(param)} with
 * Modulename_View_Helper_HelperName::helperName($param) return
 </em>/
class Vredniy_Controller_Action_Helper_ContentReplacer extends Zend_Controller_Action_Helper_Abstract
{</p>

<pre><code>public function postDispatch()
{
    //$this-&gt;getResponse()-&gt;setBody('replaced');
    // label {placeholder_image_gallery(param)}
    //call_user_func_array($function, $param_arrarray);
    // \{placeholder_(\w+)_(\w+)\((((\w+)?,?)*)\)\}
    if ('admin' === substr($this-&gt;getRequest()-&gt;getControllerName(), 0, 5))
        return;
    $regExp = '@\{placeholder_(\w+)_(\w+)\((\d+)\)\}@';
    if (preg_match_all($regExp, $this-&gt;getResponse()-&gt;getBody(), $matches)) {
        //var_dump($matches);
        $matchesFound = count($matches[0]);
        $allMatches = array();
        for($i = 0; $i &lt; $matchesFound; $i++)
            $allMatches[] = array(
                'module' =&gt; $matches[1][$i],
                'helper' =&gt; $matches[2][$i],
                'param' =&gt; $matches[3][$i],
                'assembledString' =&gt; "{placeholder_{$matches[1][$i]}_{$matches[2][$i]}({$matches[3][$i]})}"
            );
        foreach($allMatches as $currentMatch) {
            $className = ucfirst($currentMatch['module']) . '_View_Helper_' . ucfirst($currentMatch['helper']);

            if (class_exists($className)) {
                $viewHelper = new $className;
                if (method_exists($viewHelper, ucfirst($currentMatch['helper']))) {
                    $this-&gt;getResponse()-&gt;setBody(
                            str_replace(
                                    $currentMatch['assembledString'], // assembled regexp
                                    call_user_func(array($viewHelper, ucfirst($currentMatch['helper'])), $currentMatch['param']), // call it
                                    $this-&gt;getResponse()-&gt;getBody() // old body
                            )
                    );
                }
            }
        }
    }
}
</code></pre>

<p>}
```</p>

<h3>Регистрируем наш ActionHelper</h3>

<p>Осталось только подключить наш Action Helper, я делаю это в основном <strong>application/Bootstrap.php</strong></p>

<p><code>php
protected function _initActionHelpers()
{
   Zend_Controller_Action_HelperBroker::addHelper(new Vredniy_Controller_Action_Helper_ContentReplacer());
}
</code></p>

<p>Данное решение не претендует на абсолютную правильность, но меня оно пока устраиивает и всем спасибо за внимание, надеюсь, что данное решение вам когда-нибудь пригодится :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework: WYSIWYG + FileBrowser]]></title>
    <link href="http://zudochkin.ru/2011/03/zend-framework-wysiwyg-filebrowser"/>
    <updated>2011-03-22T22:10:12+03:00</updated>
    <id>http://zudochkin.ru/2011/03/zend-framework-wysiwyg-filebrowser</id>
    <content type="html"><![CDATA[<p>Здравствуй, неизвестный читатель. На просторах интернета я не встретил толковой реализации, кроме одной, ссылку на которую я вставлю в конце поста.
После проделывания всех шагов, описанных в этом посте, у вас будет иметься возможность вставлять в форму визуальный редактор с файловым менеджером парой строк<!-- more -->:</p>

<p>``` php
&lt;?php</p>

<pre><code>$wysiwyg = new Vredniy_Form_Element_WysiwygElrte('content', array(
    'label' =&gt; 'Контент'
));
</code></pre>

<p>   $this->addElement($wysiwyg);
?>
```</p>

<p>Не правда ли удобно? Итак, начнем все подробно разбирать.</p>

<h5>Шаг номер 1.</h5>

<p>Качаем <a href="http://elrte.org/">elrte</a> и <a href="http://elrte.org/elfinder">elFinder</a> с официального сайта. Здесь ни у кого не должно возникнуть сложностей. Дальше, чтобы не путаться в путях предлагаю эти библиотеки разместить как у меня. <strong>/public/elrte</strong> и <strong>/public/elfinder</strong> соответственно.</p>

<h5>Шаг номер 2.</h5>

<p>Создаем кастомизированный элемент формы <strong>Vredniy_Form_Element_WysiwygElrte</strong> (над названием, скорей всего нужно будет подумать)</p>

<p>``` php
&lt;?php
class Vredniy_Form_Element_WysiwygElrte extends Zend_Form_Element_Xhtml
{</p>

<pre><code>public $helper = 'formWysiwygElrte';
</code></pre>

<p>}
?>
```</p>

<h5>Шаг номер 3.</h5>

<p>Этот элемент формы будет вести себя как стандартный зендовский. Теперь напишем свой вью хелпер, который и будет заниматься всей грязной работой: подключать все необходимые скрипты, стили и генерировать контент исходного элемента формы.</p>

<p>``` php
&lt;?php
class Vredniy_View_Helper_FormWysiwygElrte extends Zend_View_Helper_FormElement
{</p>

<pre><code>public function formWysiwygElrte($name = null, $value = null, $attribs = null)
{
    if (!$this-&gt;view-&gt;jQuery()-&gt;isEnabled())
            $this-&gt;view-&gt;jQuery()-&gt;enable();

    if (!$this-&gt;view-&gt;jQuery()-&gt;uiIsEnabled())
            $this-&gt;view-&gt;jQuery()-&gt;uiEnable();


    $elrte_base_uri = "/js/elrte/";

    $this-&gt;view-&gt;headLink()-&gt;appendStylesheet("{$elrte_base_uri}css/elrte.full.css");
    $this-&gt;view-&gt;headScript()-&gt;appendFile("{$elrte_base_uri}js/elrte.full.js");
    $this-&gt;view-&gt;headScript()-&gt;appendFile("{$elrte_base_uri}js/i18n/elrte.ru.js");


    $elfinder_base_uri = "/js/elfinder/";
    $this-&gt;view-&gt;headLink()-&gt;appendStylesheet("{$elfinder_base_uri}css/elfinder.css");
    $this-&gt;view-&gt;headScript()-&gt;appendFile("{$elfinder_base_uri}js/elfinder.full.js");
    $this-&gt;view-&gt;headScript()-&gt;captureStart() ?&gt;
        var opts = {
            lang : 'ru',
            styleWithCss : false,
            absoluteURLs: false, // чтобы отображался не полный путь, а относительный от корня
            width   : 800,
            height  : 200,
            toolbar : 'maxi', // все возможные панели инструментов, удалить легче :)
            fmAllow  : true,
            fmOpen   : function(callback) {
                $('&lt;div id="myelfinder" /&gt;').elfinder({
                    url : '&lt;?php echo $elfinder_base_uri; ?&gt;connectors/php/connector.php',
                    lang : 'ru',
                    dialog : {
                        width : 900, // ширина файлового менеджера
                        modal : true,
                        title : 'Выбираем файлик'
                    }, // открываем в диалоговом окне
                    closeOnEditorCallback : true, // закрываем после выбора файла
                    editorCallback : callback
                })
            }
        };

        $().ready(function() {
          // создаем редактор
            $('#&lt;?php echo $name; ?&gt;').elrte(opts);
        });
    &lt;?php $this-&gt;view-&gt;headScript()-&gt;captureEnd();

    $info = $this-&gt;_getInfo($name, $value, $attribs);
    extract($info); // name, value, attribs, options, listsep, disable

    // is it disabled?
    $disabled = '';
    if ($disable) {
        // disabled.
        $disabled = ' disabled="disabled"';
    }

    // build the element
    $xhtml = '&lt;textarea name="' . $this-&gt;view-&gt;escape($name) . '"'
            . ' id="' . $this-&gt;view-&gt;escape($id) . '"'
            . $disabled
            . $this-&gt;_htmlAttribs($attribs) . '&gt;'
            . $this-&gt;view-&gt;escape($value) . '&lt;/textarea&gt;';

    return $xhtml;

}
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>В исходном коде я старался максимально комментировать не особо очевидные моменты, кроме подключения jQuery и jQueryUI (как их подключить расскажу в конце, чтобы не отвлекать вас от основной идеи).</p>

<h5>Шаг номер 4.</h5>

<p>Изменяем опции коннектора, который отвечает за файловый менеджер <strong>public/js/elfinder/php/connector.php</strong></p>

<p>``` php
&lt;?php
// из основного файла ZF index.php я вынес в отдельный
// константы, чтобы было удобно их подключать извне
require_once realpath(dirname(<strong>FILE</strong>) . &lsquo;/../../../../constants.php&rsquo;);
error_reporting(0); // Set E_ALL for debuging</p>

<p>if (function_exists(&lsquo;date_default_timezone_set&rsquo;)) {
   date_default_timezone_set(&lsquo;Europe/Moscow&rsquo;);
}</p>

<p>include_once dirname(<strong>FILE</strong>).DIRECTORY_SEPARATOR.&lsquo;elFinder.class.php&rsquo;;</p>

<p>/<strong>
 * Simple example how to use logger with elFinder
 </strong>/
class elFinderLogger implements elFinderILogger {</p>

<p>   public function log($cmd, $ok, $context, $err=&lsquo;&rsquo;, $errorData = array()) {</p>

<pre><code>  if (false != ($fp = fopen('./log.txt', 'a'))) {
     if ($ok) {
        $str = "cmd: $cmd; OK; context: ".str_replace("\n", '', var_export($context, true))."; \n";
     } else {
        $str = "cmd: $cmd; FAILED; context: ".str_replace("\n", '', var_export($context, true))."; error: $err; errorData: ".str_replace("\n", '', var_export($errorData, true))."\n";
     }
     fwrite($fp, $str);
     fclose($fp);
  }
</code></pre>

<p>   }</p>

<p>}</p>

<p>$opts = array(</p>

<pre><code>'root'            =&gt; APPLICATION_PUBLIC . '/upload/files', // path to root directory
'URL'             =&gt; '/upload/files/', // root directory URL
'rootAlias'       =&gt; 'Галерея', // display this instead of root directory name
</code></pre>

<p>);</p>

<p>$fm = new elFinder($opts);
$fm->run();
?>
```</p>

<p>Тут самое интересное это массив <strong>$opts</strong>, в котором мы задаем корневую папку нашего файлового хранилища и меняем название &ldquo;Home&rdquo; на более привычное русскому глазу &ldquo;Галерея&rdquo;.</p>

<h5>Шаг номер 5 (костыль).</h5>

<p>У меня не получилось &ldquo;из коробки&rdquo; заставить принимать правильный размер диалоговое окно, поэтому я заменил 6303 строчку в файле /js/elrte/js/elrte.full.js на свое</p>

<p><code>javascript
width    : 670,
// @todo: чтобы помещалась волшебная кнопочка
</code></p>

<h5>Шаг номер 6.</h5>

<p>Подключаем скрипты jQuery, jQuery и необходимые для них стили. Корневой файл <strong>Bootstrap.php</strong></p>

<p>``` php
&lt;?php</p>

<pre><code>protected function _initViewHelpers()
{
    $this-&gt;bootstrap('layout');
    $layout = $this-&gt;getResource('layout');
    $view = $layout-&gt;getView();
    $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
    $viewRenderer-&gt;view-&gt;addHelperPath("Vredniy/View/Helper", 'Vredniy_View_Helper');

    // init 960gs-fluid
    $view-&gt;headLink()-&gt;appendStylesheet('/css/960gs-fluid/reset.css')
            -&gt;headLink()-&gt;appendStylesheet('/css/960gs-fluid/text.css')
            -&gt;headLink()-&gt;appendStylesheet('/css/960gs-fluid/grid.css')
            -&gt;headLink()-&gt;appendStylesheet('/css/960gs-fluid/layout.css')
            -&gt;headLink()-&gt;appendStylesheet('/css/960gs-fluid/ie/ie6.css', 'all', 'IE6')
            -&gt;headLink()-&gt;appendStylesheet('/css/960gs-fluid/ie/ie.css', 'all', 'IE')
    ;


    // init jQuery &amp; UI
    ZendX_JQuery::enableView($view);
    $view-&gt;jQuery()
            -&gt;setLocalPath('/js/jquery/jquery-1.4.4.min.js')
            -&gt;setUiLocalPath('/js/jqueryui/jquery-ui-1.8.10.custom.min.js')
            -&gt;addStylesheet('/css/jqueryui/themes/start/jquery-ui-1.8.10.custom.css')
    ;

    // set doctype
    $view-&gt;doctype('HTML5');

    // set title separator
    $view-&gt;headTitle()-&gt;setSeparator(' :: ');
}
</code></pre>

<p>?>
```</p>

<p>jQuery располагаем в папку <strong>/js/jquery/</strong>, jQueryUI &ndash; в <strong>/js/jquery/ui</strong> и темы в <strong>/css/jqueryui/themes/</strong></p>

<p>И последнее, разобьем наш файл /public/index.php на два: сам файл</p>

<p>``` php
&lt;?php
require_once &lsquo;constants.php&rsquo;;
// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array(</p>

<pre><code>realpath(APPLICATION_PATH . '/../library'),
get_include_path(),
</code></pre>

<p>)));</p>

<p>/<em>* Zend_Application </em>/
require_once &lsquo;Zend/Application.php&rsquo;;</p>

<p>// Create application, bootstrap, and run
$application = new Zend_Application(</p>

<pre><code>APPLICATION_ENV,
APPLICATION_PATH . '/configs/application.ini'
</code></pre>

<p>);
$application->bootstrap()</p>

<pre><code>        -&gt;run();
</code></pre>

<p>?>
```</p>

<p>и <strong>constants.php</strong></p>

<p>``` php
&lt;?php</p>

<p>// Define path to application directory
defined(&lsquo;APPLICATION_PATH&rsquo;)</p>

<pre><code>    || define('APPLICATION_PATH', realpath(dirname(__FILE__) . '/../application'));
</code></pre>

<p>// Define application environment
defined(&lsquo;APPLICATION_ENV&rsquo;)</p>

<pre><code>    || define('APPLICATION_ENV', (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'production'));
</code></pre>

<p>// public folder
defined(&lsquo;APPLICATION_PUBLIC&rsquo;)</p>

<pre><code>    || define('APPLICATION_PUBLIC', realpath(APPLICATION_PATH . '/../public'));
</code></pre>

<p>?>
```</p>

<p>Дальше используем. Создадим форму с 2мя элементами: нашим wysiwyg'ом и простую кнопку submit. Сказано-сделано.</p>

<p>``` php
&lt;?php</p>

<p>class Static_Form_Page extends Zend_Form
{</p>

<pre><code>public function init()
{
    $wysiwyg = new Vredniy_Form_Element_WysiwygElrte('content', array(
                'label' =&gt; 'Контент'
            ));
    // @todo add filters and validators

    $this-&gt;addElement($wysiwyg);
    $this-&gt;addElement('submit', 'submit', array(
        'label' =&gt; 'Change me'
            // @todo add filters and validators
    ));
}
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>И в каком-нибудь контроллере напишем следующее:</p>

<p>``` php
&lt;?php</p>

<p>class Static_AdminController extends Zend_Controller_Action
{</p>

<pre><code>public function indexAction()
{
    $form = new Static_Form_Page();
    $form-&gt;getElement('submit')-&gt;setLabel('Создать');
    $this-&gt;view-&gt;form = $form;
    if ($this-&gt;getRequest()-&gt;isPost()) {
        if ($form-&gt;isValid($this-&gt;getRequest()-&gt;getPost())) {
            var_dump($form-&gt;getValues());
        }
    }
}
</code></pre>

<p>}
?>
```</p>

<p>В соответствующем скрипте вида напишем пару строк для вывода формы</p>

<p><code>php
Форма с Wysisyg и FileBrowser'ом
&lt;?php echo $this-&gt;form; ?&gt;
</code></p>

<p>Спасибо за потраченное на чтение сего поста время, надеюсь, информация вам оказалась полезной. Мне данной действо очень облегчило жизнь и я стал ближе на одну ступень к изобретению своего велосипеда &ndash; собственной CMS.</p>

<p><a href="/images/posts/2011-03-zend-framework-wysiwyg-filebrowser/elrte.jpg"><img class="image" src="/images/posts/2011-03-zend-framework-wysiwyg-filebrowser/elrte-300x164.jpg"></a></p>

<p>Ссылка на <a href="http://bit.ly/fDlu4C">пост</a>, которая собственно и подтолкнула меня на все работу. Автору того поста большое спасибо.</p>
]]></content>
  </entry>
  
</feed>
