---
author: admin
comments: true
date: 2010-08-20 12:47:54+00:00
layout: post
slug: design-patterns-2
title: 'Шаблоны проектирования: руководство для начинающих. Часть вторая'
wordpress_id: 590
categories:
- OOP
- php
- программирование
tags:
- design patterns
- OOP
- паттерны
- шаблоны проектирования
---

[![design-patterns2](http://vredniy.ru/wp-content/uploads/2010/08/design-patterns2-150x150.jpg)](http://vredniy.ru/wp-content/uploads/2010/08/design-patterns2.jpg)


Продолжаем тему шаблонов проектирования. Первую часть вы можете прочитать [здесь](/2010/08/design-patterns-1/).

<!-- more -->


### Шаблона проектирования Фабрика




Паттерн Фабрика - порождающий шаблон проектирования и из названия немного должно быть понятно для чего он разработан: это шабрика, порождающая объекты.





Основная цель этого паттерна - это создание разных классов в одном методе. Исходя из контекста, переданного в метод Фабрики, мы можем возвращать нужный объект.





##### Когда лучше использовать?




Использовать его следует тогда, когда нужно создать множество разных сущностей. Скажем, у вас есть класс кнопки, этот класс может иметь несколько реализация, таких как графическая кнопка или кнопка в форме в качестве submit'а. В зависимости от места, вам может понадобится создание разных кнопок - вот тут и придет на помощь паттерн Фабрика.





Давайте создадим наши классы:



[cc lang="php"]_html;
	}	
}

class ImageButton extends Button
{
	protected $_html = 'html для графический кнопки';
}

class InputButton extends Button
{
	protected $_html = 'html для сабмит кнопки';
}
?>[/cc]


Сейчас же создадим наш класс Фабрика:



[cc lang="php"][/cc]



Использовать код можно примерно так:



[cc lang="php"]getHtml();
	}
?>[/cc]



Данный кусок кода должен вывести HTML всех кнопок, имеющихся у нас. Таким образом, мы имеем возможность определить какую кнопку нас создать, в зависимости от ситуации. 






### Шаблон проектирования Декоратор




Паттерн Декоратор - структурный шаблон который добавляет дополнительный функционал объекту в режиме выполнения. 



Целью данного паттерна является добавление расширенного функционала к экземпляру, но в то же время оставить возможность инстанцировать объект без дополнительных возможностей. Также этот шаблон позволяет добавить множество декораторов к одному экземпляру. Этот паттерн являет собой своего рода альтернативу подклассам, которые наследуют функциональность родительского класса. В отличие от тех же подклассов, которые добавляют функицонал на режиме компиляии, Декоратор позволяет добавлять новый функционал в режиме выполнения, в нужных для этого ситуациях. 





Для реализации данного паттерна следует выполнить следующие действия:



	
  1. Подкласс оригинального класса поместить в класс декоратора.


	
  2. В класс декоратора добавить указатель.


	
  3. В конструктор класса декоратора передать указатель для инициализации объекта.


	
  4. Перенаправить все вызовы исходного класса указателю на данный класс


	
  5. В классе декоратора изменить все методы, чей функционал мы хотим изменить.







##### Когда использовать?




Лучшее место, чтобы использовать паттерн Декоратор там, где некоторым сущностям нужно иметь дополнительный функционал, только там, где это нужно. К примеру, у нас есть элемент HTML ссылка, ссылка для логаута (logout), которые должны выполнять разные вещи на одной странице. Для этого нам понадобится шаблон проектирования Декоратор.





Сперва, давайте уясним какие "декорации" нам нужны.





	
  *  Если мы на главной странице и осуществили вход на сайт, обернем ее тэгами h2


 	
  * Если мы не на главной странице и также вошли на сайт, то просто подчеркнем ссылку


	
  *  Если мы просто вошли на сайт, то обернуть ссылку <strong>








 


 Когда мы уяснили весь функционал, можем приступить к написанию кода.
 


 [cc lang="php"]_html = '[Выйти](logout.php)';
	}
	
	public function setHtml($html)
	{
		$this->_html = $html;
	}
	
	public function render()
	{
		echo $this->_html;
	}
 }
 
 class LogoutLinkH2Decorator extends HtmlLinks
 {
	protected $_logoutLink;
	
	public function __construct($logoutLink)
	{
		$this->_logoutLink = $logoutLink;
		$this->setHtml('

## ' . $this->_html . '

');
	}
	
	public function _call($name, $args)
	{
		$this->_logoutLink->$name($args[0]);
	}
 }
 
 class LogoutLinkUnderlineDecorator extends HtmlLinks
 {
	protected $_logoutLink;
	
	public function __construct($logoutLink)
	{
		$this->_logoutLink = $logoutLink;
		$this->setHtml('_' . $this->_html . '_');
	}
	
	public function __call($name, $args)
	{
		$this->_logoutLink->$name($args[0]);
	}
 }
?>[/cc]



Теперь давайте попробуем на деле Декоратор.



[cc lang="php"]render();
?>[/cc]



Как видно на примере, мы можем объединять несколько декораторо, если у нас есть на то необходимость. Посколько все декораторы используют магическую функцию __call, мы можем вызвать оригинальный метод. Предположим, что мы сейчас находимся на главной странице и вошли на сайт, вывод должен быть таким:



[cc lang="html"]**

## [Выйти](logout.php)

**[/cc]



### Шаблон Синглтон





Паттерн Синглтон - это порождающий шаблон проектирования, который гарантирует, что в системе есть только один экземпляр данного класса на всем времени выполнения, а также предоставляет глобальную точку доступа к единственному экземпляру.





##### Когда использовать?





Если вам нужно передать данные из одного класса в другой, то вы можете использовать Синглтон в обход традиционной передачи с помощью конструктора или аргументов. Представьте вы создали класс для работы с сессиями, который имитирует $_SESSION суперглобального массива. Этот класс должен быть инстанцирован только один раз, мы можем реализовать это примерно так:



[cc lang="php"][/cc]



Проделав это, мы сможем иметь доступ к нашему классу из любого места нашего приложения и из любого класса. Данные будут сохраняться между всеми вызовами getInstance.





### Заключение





Еще много осталось шаблонов проектирования, в этой заметке освещены лишь наиболее известные из них. Для того, чтобы получить углубленные знания, советую вам прочесть лучшую книгу, которая когда-либо была написана о шаблонах проектирования от банды четырех, скачать ее вы можете [отсюда.](/files/design-patterns.pdf)
