<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Записки Вредного программиста]]></title>
  <link href="http://zudochkin.ru/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://zudochkin.ru/"/>
  <updated>2014-02-03T00:20:36+04:00</updated>
  <id>http://zudochkin.ru/</id>
  <author>
    <name><![CDATA[Зудочкин Дима]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Написание первого плагина для Vim]]></title>
    <link href="http://zudochkin.ru/2013/08/vim-first-plugin"/>
    <updated>2013-08-16T03:40:24+04:00</updated>
    <id>http://zudochkin.ru/2013/08/vim-first-plugin</id>
    <content type="html"><![CDATA[<p>Я использую Vim уже больше года и только сейчас возникла необходимость написать свое первое для него расширение. Расширение будет преобразовывать старые хеши из версии 1.8 языка Ruby в новые, появившиеся в версии 1.9, т.е. нечто вида <strong>:a => &lsquo;b&rsquo;</strong> превратится в нечто более читаемое и компактное <strong>a: &lsquo;b&rsquo;</strong>.<!--more--></p>

<p>Для начала необходимо создать папку, где будем хранить наше расширение, я использую <strong>~/Projects/viml/ruby-hashes</strong>, для того, чтобы проекты на одном языке не лежали в одной папке с проектами на другом. (Когда проектов очень много можно легко запутаться).</p>

<p>```
tree .
├── LICENSE-MIT.txt
├── README.md
├── autoload
│   └── rubyhashes.vim
└── doc</p>

<p>2 directories, 3 files
```</p>

<p>Вот что будет представлять из себя весь плагин. <strong>LICENSE-MIT.txt</strong>, думаю не вызывает вопросов, впрочем, как и <strong>README.md</strong>, остается только один файл с раширением <strong>.vim</strong>, в папке <strong>autoload</strong>, почему именно в эту папку, в не в папку <strong>plugin</strong>, наверное, спросите вы. Отвечу, что в папке <strong>autoload</strong> хранятся вещи, которые загружаются только по требованию, т.е., если нам не нужно будет это расширение, <strong>Vim</strong> загружать его не будет. (Надеюсь, ничего не перепутал).</p>

<h3>Задача</h3>

<p>Реализовать плагин, который сможет заменять старые хеши на новые во всем файле.</p>

<h3>Реализация</h3>

<p>Теперь приступим непосредственно к программирование на <strong>VimScript</strong>&lsquo;e. <strong>VimScript</strong> &ndash; достаточно богатый скриптовый язык ко всему прочему позволяющий также и объявлять функции, а куда же без них. Функции будем называть следующим образом <strong>#{названиеФайлаБезРасширения}#НазваниеФункции()</strong>, т.е. функцию в файле <code>autoload/rubyhashes.vim</code>, производящую замену по всему файлу, мы назовем <code>rubyhashes#ReplaceAll()</code>. И соответственно ее объявление будет выглядеть, как</p>

<p><code>
func! rubyhashes#ReplaceAll()
  echo 'hello, world!'
endfunc
</code></p>

<p>Для того, чтобы увидеть выполнение нашей функции, файл необходимо сохранить. Чтобы <strong>Vim</strong> интерпретировал нашу функцию, как часть своей экосистемы, необходимо написать <code>:source %</code>. (Примерно тоже самое есть и в <strong>bash</strong>).</p>

<p>Теперь давайте запустим нашу функцию, чтобы увидеть заветные хеллоу ворлд.</p>

<p><img class="image" src="/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-15_23.37.56.png"></p>

<p>Если все было набрано верно, то вы увидите заветную фразу.</p>

<p><img class="image" src="/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-15_23.38.09.png"></p>

<p>Следующим шагом будет составление регулярного выражения, по которому будут находиться старые хеши и заменяться на новые. Если бы мы его писали на Ruby, как и на многих других языках программирования, использующих PCRE &ndash; Perl-совместимые регулярные выражения, к коим относятся javascript, php и др., то оно бы выглядело следующим образом.</p>

<p><code>/:(\w+)\s*=&gt;\s*/</code>, если кто не очень хорошо с ними знаком, скажу что мы сначала ищем <strong>:</strong>, затем любой символ слова <strong>(\w+)</strong>, дальше долго следовать любое количество пробелов <strong>\s</strong>* (ноль в том числе), дальше &ndash; символы <strong>=></strong> и любое количество пробелов.</p>

<p>Осталось только трансформировать данное регулярное выражение в vim-совместимое, для этого необходимо будет экранировать скобки и знак &ldquo;плюс&rdquo;, что в результате превращается в <code>:\(\w\+\)\s*=&gt;\s</code>.</p>

<p>Вы можете написать старый рубишный хеш вида <strong>:a => &lsquo;b&rsquo;</strong>, нажать <strong>/</strong> (запускает поиск) и ввести там <code>:\(\w\+\)\s*=&gt;\s</code> и увидите, что найденный текст подсветился.</p>

<p><img class="image" src="/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-16_00.01.38.png"></p>

<p>Искать по регулярному выражения мы уже научились, теперь необходимо заменять текст по регулярному выражению. В <strong>Vim'е</strong> для того, чтобы менять текст существует команда <strong>substitute</strong> или сокращенно <strong>s</strong>. Чтобы заменить все вхождения символа &ldquo;а&rdquo;, на &ldquo;б&rdquo;, необходимо выполнить команду <code>:%s/a/b/g</code>, где <strong>%</strong> &ndash; это диапазон поиска и замены, в данном случае это шорткат для всего файла, &ldquo;a&rdquo; &ndash; что заменяем, &ldquo;b&rdquo; &ndash; чем заменяем, &ldquo;g&rdquo; &ndash; это флаг, указывающий, что необходимо не останавливаться на первой замене, а продолжить до конца.</p>

<p>Результирующее команда замены примет вид</p>

<p><code>%s/:\(\w\+\)\s*=&gt;\s*/\1: /ge</code></p>

<p>где <strong>\1:</strong> &ndash; это на что меняем (наша <strong>(\w+)</strong> часть)
<strong>/ge</strong> &ndash; g &ndash; глобальный поиск и замена, e &ndash; это не показывать ошибку, если искомое выражение не найдено.</p>

<p><img class="image" src="/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-16_00.08.56.png"></p>

<p>Дело за малым, сейчас нужно сделать так, чтобы при вызове нашей функции запускалась команда из предыдущего пункта. И тут в <strong>Vim</strong> есть команда, которая так и называется <strong>execute</strong> или сокращенно <strong>exe</strong>. Удалим <strong>echo &lsquo;hello, world!&rsquo;</strong> и допишем</p>

<p><code>
func! rubyhashes#ReplaceAll()
  exe '%s/:\(\w\+\)\s*=&gt;\s*/\1: /ge'
endfunc
</code></p>

<p>Сохраним и запустим <code>:source %</code>, чтобы данные нашей функции обновились. Теперь пробуем. Пишем в командной строке <code>call rubyhashes#ReplaceAll()</code> после того, как нажмем <strong>:</strong>. Если вы запустили нашу функцию в окне, где находились старые хеши, то они должны были поменяться на новые.</p>

<p><img class="image" src="/images/posts/2013-08-vim-first-plugin/Screenshot_2013-08-16_00.16.03.png"></p>

<p>Вот и все для небольшого туториала по Vim плагинам, надеюсь, вам понравилось. <a href="https://github.com/vredniy/vim-rubyhashes">Ссылка на репозиторий на гитхабе</a>, где имеется, помимо функции, заменяющей хеши во всем файле, функция, которая производит замену в выделенном.</p>
]]></content>
  </entry>
  
</feed>
