<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby On Rails | Записки Вредного программиста]]></title>
  <link href="http://vredniy.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://vredniy.github.io/"/>
  <updated>2014-02-01T13:53:43+04:00</updated>
  <id>http://vredniy.github.io/</id>
  <author>
    <name><![CDATA[Зудочкин Дима]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Разворачиваем rails приложение вместе с capistrano]]></title>
    <link href="http://vredniy.github.io/2013/03/unicorn-rbenv-nginx-postgresql"/>
    <updated>2013-03-03T16:13:05+04:00</updated>
    <id>http://vredniy.github.io/2013/03/unicorn-rbenv-nginx-postgresql</id>
    <content type="html"><![CDATA[<p>Здравствуйте, дорогие друзья, сегодня я расскажу вам как быстро развернуть Ruby on Rails приложение на сервере. Если у вас маленькое приложение, которое посещает 10 человек в день, то вам достаточно будет задеплоить его на heroku (имею в виду бесплатный тариф) и не читать все то, что написано ниже. Если же у вас приложение побольше, то милости прошу на огонек.<!-- more --></p>

<h3>Сервер</h3>

<p>Сервер: я буду настраивать все на Ubuntu 12.04 (64x), но не думаю, что должны возникнуть сложности с подобной операционной системой. Если же появятся траблы, пишите в комментах, попытаемся решить вместе.</p>

<p>Итак, поехали, логинимся по root'ом и производим базовую настройку сервера. Я начинаю всегда с локалей, для этого делаю следующее.</p>

<p><strong>localedef ru_RU.UTF-8 -i ru_RU -fUTF-8</strong> и в файл <strong>/etc/default/locale</strong> добавляю</p>

<p><code>
LANG="ru_RU.UTF-8"
LC_CTYPE="ru_RU.UTF-8"
LC_NUMERIC=C
LC_TIME=C
LC_COLLATE=C
LC_MESSAGES=C
</code></p>

<p>Затем создаем пользователя, от лица которого мы и будем все делать и наделим его привилегиями запускать команды через sudo.</p>

<p><code>useradd -m -g staff -s /bin/bash deployer &amp;&amp; passwd deployer</code> &ndash; создаем пользователя deployer в группе staff (флаг -g) и с домашней папкой /home/deployer (флаг -m), флаг -s назначает пользоватлю шел по умолчанию. И задаем ему пароль. В дальнейшем весь экшн будет производиться от имени этого пользователя.</p>

<p>Чтобы наш пользователь мог выполнять команды от рута, необходимо добавить его в группу в файл <strong>/etc/sudoers</strong></p>

<p><code>
(%staff ALL=(ALL) ALL)
</code></p>

<p>Теперь выходим из под рута и логинимся под деплоером. Для того, чтобы не писать пароль каждый раз при входе, необходимо добавить на сервер инфо, что мы свои (авторизация по ключу).</p>

<p><code>cat ~/.ssh/id_rsa.pub | ssh deployer@server "mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys"</code></p>

<p>Если у кого на рабочей машине ubuntu, то они могут запустить эту операцию намного проще (ssh-copy-id deployer@server).</p>

<p>Проверяем, ssh deployer@server более не должно спрашивать пароль, а сразу же пустить нас на сервер.</p>

<p>Для удобства можно добавить в файл <strong>~/.ssh/config</strong>, чтобы удобно было заходить, печатая только <strong>ssh my_serv</strong></p>

<p>```
Host my_serv
  HostName server.com$
  User deployer$</p>

<p>```</p>

<p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code> &ndash; обновляем все источники приложений и накатываем обновления</p>

<h3>Установка и базовая настройка Postgres'а</h3>

<p><code>sudo apt-get install postgresql libpq-dev</code> (второй пакет нужен для того, чтобы гем pg поставился)</p>

<p>Данная установка подразумевает, что вы не собираетесь соединяться с базой данных с других машин. По умолчанию в Ubuntu, Postgresql сконфигурирован так, чтобы использовать логин текущего пользователя, т.е. если вы вошли под пользователем deployer и в Postgresql есть пользователь deployer, то спрашивать пароль у вас никто не будет.</p>

<p><code>sudo -u postgres createuser --superuser $USER</code> (создаем пользователя deployer, который будет являться суперпользователем, этого делать не желательно, если у вас более, чем один проект, лучше под каждую бд создать отдельных пользователей с разными паролями)</p>

<p><code>sudo -u postgres psql</code> &ndash; запускаем postgres консоль</p>

<p>postgres=# \password deployer &ndash; задаем пароль для нашего пользователя (имя пользователя заменить на свое) &ndash; этот пароль будет использоваться в конфигах вашего приложения (config/database.yml)</p>

<p><code>createdb $USER</code> &ndash; создаем базу данных deployer</p>

<h3>Ставим rbenv, ruby и gem bundler</h3>

<p>Ставим все необходимое, чтобы склонировать репозиторий rbenv, установить последние ruby и пользоваться загрузкой картинок в наших приложениям (последние два пакета).</p>

<p><code>sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt1-dev autoconf libc6-dev libncurses5-dev libmagickcore-dev imagemagick</code></p>

<p>Теперь давайте перейдем к установки ruby с помощью rbenv и ruby-build. Здесь нет ничего не обычного, в основном все взято со страниц README rbenv и ruby-build.</p>

<h5>rbenv</h5>

<p><code>git clone git://github.com/sstephenson/rbenv.git ~/.rbenv</code></p>

<p><code>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile</code> &ndash; для доступа к команде rbenv</p>

<p><code>echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile</code> &ndash; для доступа к бинарникам установленных гемов и автокомплиту rbenv команд</p>

<p><code>exec $SHELL</code> &ndash; перезапускам шел</p>

<h5>ruby-build &ndash; для простой загрузки и сборки ruby из исходников</h5>

<p><code>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</code></p>

<p>устанвливаем ruby <code>rbenv install 1.9.3-p392</code> (для этого необходимо немало времени, поэтому наберитесь терпения, на машине с 512 оперативы эта операция занимает около 7 минут)</p>

<p>Пока приложение настраивается можно добавить пару строк в ~/.gemrc файл, для того, чтобы не устанавливать документацию вместе с гемами</p>

<p>install: &mdash;no-ri &mdash;no-rdoc
update: &mdash;no-ri &mdash;no-rdoc</p>

<p>после этого <code>rbenv global 1.9.3-p392</code> и <code>gem install bundler</code></p>

<h3>Локальное приложение для деплоя</h3>

<p>Теперь давайте подготовим наше локальное приложение (я для
этих целей создал простое приложение rails</p>

<p><code>rails new simple_deployment -T</code></p>

<p><code>rails g scaffold item name description:text</code> &ndash; для того, чтобы проверить и соединение с базой данных.</p>

<p>создадим файл .rbenv-version (<code>echo '1.9.3-p392' &gt; .rbenv-version</code>) для того, чтобы unicorn запускал необходимую версию ruby</p>

<p>также добавим в Gemfile gem unicorn и gem capistrano (последний в группу :development)</p>

<p>``` ruby
gem &lsquo;unicorn&rsquo;</p>

<p>group :development do</p>

<pre><code>gem 'capistrano'
</code></pre>

<p>end</p>

<p>```</p>

<p>и запустим в консоли <code>capify .</code> (capistrano создаст для нас файлик config/deploy.rb, который и будет &ldquo;пультом управления&rdquo; нашего приложения на сервере)</p>

<p><strong>config/deploy.rb</strong></p>

<p>``` ruby</p>

<p>require &lsquo;bundler/capistrano&rsquo;
load &lsquo;deploy/assets&rsquo;</p>

<p>set :repository, &lsquo;YOUR_GIT_OR_SVN_REPOSITORY_URL&rsquo;
set :scm, :git</p>

<p>server &lsquo;YOUR_SERVER_IP_OR_HOSTNAME&rsquo;, :app, :web, :db, :primary => true</p>

<p>set :ssh_options, { :forward_agent => true }
default_run_options[:shell] = &lsquo;bash -l&rsquo;</p>

<p>set :user, &lsquo;deployer&rsquo;
set :group, &lsquo;staff&rsquo;
set :use_sudo, false
set :rails_env, &lsquo;production&rsquo;</p>

<p>set :project_name, &lsquo;simple_deployment&rsquo;</p>

<p>set :deploy_to, &ldquo;/home/deployer/projects/#{ project_name }&rdquo;</p>

<p>desc &ldquo;Restart of Unicorn&rdquo;
task :restart, :except => { :no_release => true } do
  run &ldquo;kill -s USR2 <code>cat /home/deployer/projects/#{ project_name }/shared/pids/unicorn.pid</code>&rdquo;
end</p>

<p>desc &ldquo;Start unicorn&rdquo;
task :start, :except => { :no_release => true } do
  run &ldquo;cd #{current_path} ; bundle exec unicorn_rails -c config/unicorn.rb -D -E #{ rails_env }&rdquo;
end</p>

<p>desc &ldquo;Stop unicorn&rdquo;
task :stop, :except => { :no_release => true } do
  run &ldquo;kill -s QUIT <code>cat /home/deployer/projects/#{ project_name }/shared/pids/unicorn.pid</code>&rdquo;
end</p>

<p>after &lsquo;deploy:finalize_update&rsquo;, &lsquo;deploy:symlink_db&rsquo;</p>

<p>namespace :deploy do
  desc &ldquo;Symlinks the database.yml&rdquo;
  task :symlink_db, :roles => :app do</p>

<pre><code>run "ln -nfs #{deploy_to}/shared/config/database.yml #{release_path}/config/database.yml"
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Проекты у нас на сервере будут жить в домашнией папке + projects, т.е. для нашего пользователя deployer это будет /home/deployer/projects.</p>

<p>В каждой папке приложения находятся еще три папки (releases &ndash; где хранятся все релизы нашего приложения, current &ndash; симлинк на текущий релиз из папки releases и shared, где хранится общая шняга для все релизов: пиды, идентификаторы сессий, логи и прочее.)</p>

<p>Также необходимо добавить ssh ключ сервера на github или bitbucket</p>

<p>содержимое ключа <code>cat ~/.ssh/id_rsa.pub</code>, если такого файла нет, то нужно его сгенерировать <code>ssh-keygen -t rsa</code></p>

<p>и сделать с сервера <code>ssh git@bitbucket.org</code>, чтобы подтвердить соединение.</p>

<h5>config/unicorn.rb &ndash; минимальный конфиг для нашего HTTP сервера.</h5>

<p>``` ruby
worker_processes 2
user &lsquo;deployer&rsquo;, &lsquo;staff&rsquo;
preload_app true
timeout 30</p>

<p>project_name = &lsquo;simple_deployment&rsquo;</p>

<p>working_directory &ldquo;/home/deployer/projects/#{ project_name }/current&rdquo;</p>

<p>listen &ldquo;/tmp/#{ project_name }.socket&rdquo;, :backlog => 64
pid &ldquo;/home/deployer/projects/#{ project_name }/shared/pids/unicorn.pid&rdquo;</p>

<p>stderr_path &ldquo;/home/deployer/projects/#{ project_name }/shared/log/unicorn.stderr.log&rdquo;
stdout_path &ldquo;/home/deployer/projects/#{ project_name }/shared/log/unicorn.stdout.log&rdquo;
```</p>

<p>Если вы указали все верно в config/deploy.rb, то можно запустить <strong>cap deploy:setup</strong> для создания capistrano необходимых для разворачивания приложения папок на стороне сервера.</p>

<h3>Nginx</h3>

<p>Устанвливаем nginx командой <code>sudo apt-get install nginx</code> и переходим к его настройке. Для начала отредактируем файл <strong>/etc/nginx/nginx.conf</strong></p>

<p>```
user deployer staff;
worker_processes 2;</p>

<p>pid /var/run/nginx.pid;
events {
  worker_connections 1024;
  multi_accept on;
}</p>

<p>http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;</p>

<p>  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;</p>

<p>  gzip on;
  gzip_disable &ldquo;msie6&rdquo;;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</p>

<p>  include /etc/nginx/conf.d/<em>.conf;
  include /etc/nginx/sites-enabled/</em>;
}</p>

<p>```</p>

<p>Последняя строчка нужна, чтобы nginx загружал свои конфиги и из папка <strong>/etc/nginx/sites-enabled/</strong> (это нужно для того, чтобы не хранить все конфиги для проектов в одном файле).</p>

<p>А теперь nginx конфиг для нашего приложения.Будем считать, что наше приложение называется simple_deployment, а домен у него simple-deployment.com (чтобы вам удобнее было заменять на свои данные).</p>

<p>```
upstream simple_deployment {
  server unix:/tmp/simple_deployment.socket fail_timeout=0;
}</p>

<p>server {
  server_name simple-deployment.com;
  root /home/deployer/projects/simple_deployment/current/public;
  access_log /var/log/nginx/simple_deployment_access.log;
  rewrite_log on;</p>

<p>  location / {</p>

<pre><code>proxy_pass http://simple_deployment;
proxy_redirect off;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

client_max_body_size 10m;
client_body_buffer_size 128k;

proxy_connect_timeout 90;
proxy_send_timeout 90;
proxy_read_timeout 90;
proxy_buffer_size 4k;
proxy_buffers 4 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;
</code></pre>

<p>  }</p>

<p>  location ~ ^/(assets|images|javascripts|stylesheets|system)/ {</p>

<pre><code>root /home/deployer/projects/simple_deployment/current/public;
expires max;
break;
</code></pre>

<p>  }
}
```</p>

<p>и удалить файлы <strong>/etc/nginx/sites-available/default</strong> и <strong>/etc/nginx/sites-enabled/default</strong></p>

<p>Теперь можно смело пробовать запускать <code>cap deploy:migrations</code>  в консоли локального приложения. Если все было выполнено по данной заметке, то вы должны получить развернутое приложения на сервере в папке <strong>/home/deployer/projects/simple_deployment</strong>, если вы конечно строго следовали инструкциям.</p>

<p>Запустим последную команду на сервере, запустим nginx (<code>sudo service nginx start</code>).</p>

<p>Теперь, после деплоя можно запускать команду cap start или cap stop для запуска сервера или его остановки. Надеюсь, следуя этому мануалу, у вас получилось развернуть свое приложение на сервере. Если нет, то милости прошу в комментарии, чем смогу, постараюсь помочь.</p>

<p>Ссылки на дополнительные материлы:</p>

<ul>
<li><a href="http://gembundler.com/deploying.html">деплой вместе с bundler</a></li>
<li><a href="http://unicorn.bogomips.org/Unicorn/Configurator.html">конфигурация unicorn'а</a></li>
</ul>


<p>Enjoy, my little colleagues :)</p>

<p>UPDATE: 06.03.2013
Немного защитим наш сервер, в первую очередь давайте запретим логин рута по ssh, у нас на это есть пользователь deployer, который может выполлнять команды от рута с помощью sudo. Для этого в файле <strong>/etc/ssh/sshd_config</strong> необходимо изменить
<strong>PermitRootLogin</strong> на <strong>no</strong> и <strong>PasswordAuthentication</strong> на <strong>no</strong>, последняя настройка запретит авторизацию для SSH по паролю (только по ключу).</p>
]]></content>
  </entry>
  
</feed>
