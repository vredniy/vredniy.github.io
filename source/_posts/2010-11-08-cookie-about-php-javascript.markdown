---
author: admin
comments: true
date: 2010-11-08 14:55:24+00:00
layout: post
slug: cookie-about-php-javascript

permalink: /2010/11/cookie-about-php-javascript

title: Немного кулинарии или поговорим о печеньях
wordpress_id: 611
categories:
- javascript
- php
- программирование
tags:
- cookie
- javascript
- php
- setcookie
---

[![](http://vredniy.ru/wp-content/uploads/2010/11/963455_664461-150x150.jpg)](http://vredniy.ru/wp-content/uploads/2010/11/963455_664461.jpg)

После долгой паузы, я решил все же заняться делом и раскрыть очень важную для каждого веб-разработчика тему, а именно cookie или просто печенье ;)





Вы должно быть много слышали об этих самых кукисах, но что это конкретно и что мы с ними можем сделать? В этой заметке мы узнаем основы куков и как их использовать в разнообразных веб-приложениях. Научимся также работать с куками из PHP и JavaScript, уделив немного внимания извечному вопросу безопасности. В общем, милости прошу.

<!-- more -->



### Что же это вообще такое (куки)?




Сперва узнаем что же это за такое "печенье", и даже, если вы уже использовали их в своих проектах, некоторые моменты в заметке могут показаться вам все же интересными.





Чтобы легче всего представить механизм куков, проведем аналогию с файлами, сохраненными на вашем компьютере. После запроса к серверу, ваш браузер создает такой файл, и сервер может легко читать из него данные и записывать. Хоть этот процесс с виду кажется очень опасным, но на практике все намного приятней в связи с некоторыми особенностями куков и с их ограничениями.






		
  * Веб-сервер имеет доступ лишь к кукам, установленным в том же домене. К примеру, куки установленные для example.com не видны для example2.com, верно и обратное.


	
		
  * Куки не могут быть более 4 килобайт в связи с ограничениями HTTP протокола.


	
		
  * Также существует ограничение на количество куков для каждого домена. Это число зависит от браузера, но обычно это 20 "печенек" для каждого. 


	
		
  * И еще одно ограничение общего числа куков, которое тоже зависит от браузера и при достижении этого числа, обычно в районе 300, новые куки устанавливаются, а старые удаляются.




	


У "печений" есть "срок годности" - дата, когда браузер удаляет куку, которая больше не нужна веб-серверу. Если время жизни куки пустое значение, кука живет пока соединение с сервером активно, т.е. пока не закрыта вкладка или не закрыт сам браузер.






### Немного технических аспектов.




Куки передаются по средством HTTP протокола, который используется браузером для приема и отправки файлов на сервер. Когда запрашивается кука, браузер отправляет ее на сервер, вставляя в HTTP заголовок примерно следующее:

	[cc lang="javascript"]Set-Cookie: Name=content data; expires=Fri, 31-Dec-2010 22:00:01 GMT; path=/; domain=.example.com[/cc]
	
Рассмотрим поподробнее эту строку.
	**Set-Cookie**: позволяет браузеру узнать, когда сервер создает новую куку;
	**Name** - название куки, каждая кука в домене должна иметь свое уникальное имя, "content data" - это данные которые кука в себе содержит, могут быть либо числом, либо строкой вплоть до 4 килобайт.
	**expires**= время "жизни" куки. 
	**domain** и **path** - домен, на котором кука будет активна, к примеру, если вы укажите в качестве домена mail.example.com, то куки будут слаться лишь в этом субдомене, если же example.com, то будут слаться на все субдомены. То же самое и путями.
	
	

В следующем шаге мы узнаем, как эти свойства могут быть использованы в языках программирования. 


	
	
	

### Как создавать куки и читать данные из них


	
	

#### PHP


	
	

Самое главное правило, которое нужно всегда помнить, так это то, что создание куков должно происходить до вывода каких-либо данных в браузер. 


	
	[cc lang="php"][/cc]
	
	

Славненько, теперь мы научились создавать куки, но нам нужно и прочесть данные из них. Благо для нас, PHP предоставляет удобную возможность обращаться к суперглобальному массиву $_COOKIE[], где и лежат все "печенья". Небольшой пример
	[cc lang="php"][/cc]


	
	
	

#### JavaScript


	
	

Куки также могут быть созданы и прочитаны на стороне клиента. Для этого существует объект document.cookie, пример использования которого представлен чуть ниже.


	[cc lang="javascript"]// получаем дату
	var expireDate = new Date();
	expireDate.setHours(expireDate.getHours() + 5);
	document.cookie = 'cookiename=cookievalue; expires=' + expireDate.toUTCString() + 'path=/; domain=test.cookie.local';[/cc]
	
	

А вот небольшой, но немного запутанный пример чтения.


	
	
	[cc lang="javascript"]var cookieName = 'testcookiename';
	var textArray = document.cookie.split(';'); // разделяем строку на массив, содержащий ключи и значения
for(var i = 0; i < textArray.length; i++){ // проходим по всем значениям
var textPiece = textArray[i]; 
 // удаляем пробелы
while(textPiece(0)==' ') textPiece = textPiece.substring(1,textPiece.length);	
	if (textPiece.indexOf(cookieName)== 0){
	return textPiece.substring(cookieName.length,c.length);
}
}[/cc]



Код и в правду кажется немного запутанным. Чтобы немного облегчить себе жизнь напишем пару функций для создания и чтения из куков



[cc lang="javascript"]function writeCookie(cookieName, cookieValue, expireHours, path, domain){
var date =  new Date();
date.setHours(date.getHours + expireHours);
document.cookie = cookieName + '=' + cookieValue + '; expires=' + date + '; path=' + path + '; domain=' + domain;
}

function readCookie(cookieName){
var textArray = document.cookie.split(';');
for(var i = 0; i < textArray.length; i++){
var textPiece = textArray[i];
while(textPiece(0)==' ') textPiece = textPiece.substring(1,textPiece.length);
if (textPiece.indexOf(cookieName)== 0) return textPiece.substring(cookieName.length,c.length);
}
}[/cc]


	

Обатите внимания, когда будете использовать эти функции, что в них нет проверки на ошибки.


		
		
		

### Что делать с куками?


		
		

Сейчас куки используются почти везде: сохранение настроек пользователя, такие как язык, местоположение или разрешение экрана, язык пользователя. И потом, когда клиент заходит к вам на сайт в очередной раз, настройки его применяются и все счастливы =)


		
		
		

### Немного уличной магии


		


		В завершении заметки мы с вами напишем немного интересного кода, который использует куки.


		
		

#### Сниппет "запомни меня"


		

Для реализации нам потребуется несколько вещей. Первое, у нас должна быть таблица в базе данных, содержащая имя пользователя, пароль и идентификационное поле. Второе, нам нужна уникальная строка или число, чтобы идентифицировать пользователя по средствам куки (это и есть то самое идентификационное поле). В данном примере мы используем SHA-1 для надлежащей безопасности.







> "Больщинство программистов записывают и логин, и пароль в куку. Это очень небезопасно, потому что куки обычно пересылаются по небезопасному соединению и могут быть перехвачены злоумышленниками"	



	


[cc lang="php"]username;

	//установим новый хэш для следующей авторизации

	echo 'Вы успешно вошли, '.$username;

} else{
//авторизация не прошла
echo "Неправильный пароль или имя пользователя!";
}

?>[/cc]

		
		
		
			

### Чему мы научились?




После прочтения этой заметки вы должны были усвоить (если этого еще не знали) следующее:


		
  * Никогда не храните очень важные данные в куке. 


		
  * Никогда не доверяйте данным из куки. Фильтруйте их, злоумышленник может легко изменить эти данные.


		
  * Устанавливайте срок "годности" для куки, повышая тем самым безопасность вашего приложения.




	


Приятного вам программирования, друзья!



		
		
		
