<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: postgresql | Записки Вредного программиста]]></title>
  <link href="http://zudochkin.ru/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://zudochkin.ru/"/>
  <updated>2014-02-09T16:59:49+04:00</updated>
  <id>http://zudochkin.ru/</id>
  <author>
    <name><![CDATA[Зудочкин Дима]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Полнотекстовый поиск по телефонным номерам разного формата (PostgreSQL)]]></title>
    <link href="http://zudochkin.ru/2014/01/fulltext-phones-postgresql"/>
    <updated>2014-01-22T02:44:24+04:00</updated>
    <id>http://zudochkin.ru/2014/01/fulltext-phones-postgresql</id>
    <content type="html"><![CDATA[<p>В одном из последних своих проектов, где использовалась большая база контактов, у каждого контакта имелось несколько телефонов, понадобилось искать по номеру телефона. Недолго думая решил сделать это через встроенный ILIKE, но поиск почти ничего не находил, потому что в таблице с номерами телефонов хранились номера в совершенном разных форматов, например, +7(903)555-12-11, +46 8 52506000 и т.д. Поэтому нужно было придумать что-то более радикальное и в то же время не очень медленное. <!--more--></p>

<p>Идея номер 2 заключалась в том, чтобы для каждого телефонного номера в этой же таблице сохранять номер телефона без специфических символов, т.е. 79035551211 и 46852506000 соответственно. Но идея не нравилась тем, что необходимо было почти дублировать колонку, оставил этот план про запас, на случай, если ничего более путного не придумаю.</p>

<p>Идея номер 3 заключается в использовании встроенных функций замены при поиске, например <strong>regexp_replace</strong>, которая позволяет заменять строки по регекспу.</p>

<p><code>SELECT number FROM phones WHERE regexp_replace(number, '\\d', '', 'g') ILIKE '%313%';</code> &ndash; найдет все номера, в которых встречаются подряд идущие цифры <strong>313</strong> (первый параметр это где ищем, второй &ndash; сам регексп <code>\d</code> &ndash; только цифры, третий &ndash; меняем на пустую строку и последний модификатор для регулярного выражения, который указывает что поиск нужно вести до победного, а не останавливается на первом вхождении).  Но опять же есть небольшая проблема, если посмотреть <strong>EXPLAIN</strong>, то становится понятно в чем она.</p>

<p>Для этого запускаем <code>EXPLAIN ANALYZE SELECT number FROM phones WHERE regexp_replace(number, '\\d', '', 'g') ILIKE '%313%';</code> в результате видим примерно следующее.</p>

<p><img class="image" src="/images/posts/2014-01-fulltext-phones-postgresql/huge_Screenshot_2014-01-21_20.31.34.png"></p>

<p>Что как бы намекает нам, что это очень долго, потому что поиск идет строка за строкой, просматривая каждую строку таблицы. Значит, нам нужен индекс, комплексный индекс.</p>

<p><code>CREATE INDEX idx_phones_search_on_number ON phones USING gist(regexp_replace(number, '\\d', '', 'g') gist_trgm_ops);</code></p>

<p>Проверяем, запускаем такой же запрос и получаем следующую картину.</p>

<p><img class="image" src="/images/posts/2014-01-fulltext-phones-postgresql/huge_Screenshot_2014-01-21_21.48.18.png"></p>

<p>Мы видим, что сейчас начал использоваться индекс и скорость выполнения запроса возросла в 6 с небольшим раз. Магия индексов воочию.</p>

<p>Но давайте пойдем чуть дальше и допустим, что пользователь сам вводит номер телефона, по которому собирается найти контакт. Он может это сделать как нам удобно <em>79035551211</em> или же как нам вообще не удобно, <em>+7(903)555-12-11</em> и более того, он ничего не найдет. Значит нужно и в запросе от пользователя удалять все нецифровые символы. Например, так:</p>

<p><code>'+7(903)555-12-11'.gsub(/\D/, '')</code>, но это добавляет некоторую головную боль, т.к. и в ruby, и в sql придется выполнять одно и то же действие, но на разных языках, что не есть хорошо.</p>

<p>Помогут решить нам эту проблему postgresql функции. Одна будет удалять все нецифровые символы, другая будет оставлять только цифры и знак <strong>%</strong>, для задания маски поиска. Для этого создадим миграцию для добавления двух функций и заодно добавим индекс. Получится следующее:</p>

<p>``` ruby
class AddFunctionsAndIndexForSearchByPhone &lt; ActiveRecord::Migration
  def up</p>

<pre><code>ActiveRecord::Base.connection.execute %q{
  CREATE OR REPLACE FUNCTION onlynum(n text) RETURNS text AS
  $func$
  SELECT regexp_replace($1, '\\D', '', 'g');
  $func$ LANGUAGE sql IMMUTABLE;

  CREATE OR REPLACE FUNCTION onlynums(n text) RETURNS text AS
  $func$
  SELECT regexp_replace($1, '[^\d%]', '', 'g');
  $func$ LANGUAGE sql IMMUTABLE;

  CREATE INDEX idx_phones_search_on_number ON phones USING gist(onlynum(number) gist_trgm_ops);
}
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>ActiveRecord::Base.connection.execute %Q{
  DROP INDEX idx_phones_search_on_number;

  DROP FUNCTION onlynum(text);
  DROP FUNCTION onlynums(text);
}
</code></pre>

<p>  end
end
```</p>

<p>Запустим миграцию <code>rake db:migrate</code> и добавим где-нибудь в модель, пусть это будет <strong>Phone</strong> метод <strong>.search</strong> примерно следующего содержания:</p>

<p>``` ruby
class Phone &lt; ActiveRecord::Base
  def self.search term</p>

<pre><code>where 'onlynum(phones.number) LIKE onlynums(:search)', search: "%#{term}%"
</code></pre>

<p>  end
end
```</p>

<p>Это очень упрощенный метод, но он работает, теперь для поиска телефона, необходимо вызвать где-нибудь в коде наш метод: <code>Phone.search '313'</code> и вы получите список строк, телефоны которых содержат заданную строку.</p>

<p><img class="image" src="/images/posts/2014-01-fulltext-phones-postgresql/huge_Screenshot_2014-01-21_22.39.20.png"></p>

<p>Надеюсь, данный пост поможет вам. Все мысли, ошибки, неточности можете оставлять в комментариях, с удовольствием их почитаю :) Мир, братья и сестры.</p>
]]></content>
  </entry>
  
</feed>
